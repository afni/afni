version: 2.1
############################################################################
#Define commands that can be reused in the jobs section
############################################################################
commands:
  setup_dev_base_image:
    description: "Get base image using cache and  docker build"
    parameters:
        image_cache_version:
            type: string
    steps:
      - restore_an_exact_cache:
          version_file: "/tmp/src/afni/.docker/afni_dev_base.dockerfile"
          version: "<< parameters.image_cache_version >>"
      - load_cached_docker_image_from_disk:
          image_name: afni_dev_base
      - run:
          command: |
            if [[  "$(docker images -q afni/afni_dev_base 2> /dev/null)" == "" ]];
            then
                  docker build -t afni/afni_dev_base  \
                  -f .docker/afni_dev_base.dockerfile .
            fi
      - save_docker_image_to_disk:
          image_name: afni_dev_base
      - save_cache:
          # store a cache for this dockerfile version
          key: v<< parameters.image_cache_version >>-/tmp/src/afni/.docker/afni_dev_base.dockerfile-{{ checksum "/tmp/src/afni/.docker/afni_dev_base.dockerfile" }}
          paths:
            # path named using pattern for load_cached_docker_image_from_disk
            - /tmp/cache/afni_dev_base_docker.tar.gz

  build_afni_image:
    description: "Build, save, and cache a docker image of AFNI"
    parameters:
      build_type:
        type: string
      image_cache_version:
        type: string
    steps:
      - setup_dev_base_image:
          image_cache_version: << parameters.image_cache_version >>
      - run:
          name: Build image
          no_output_timeout: 30m
          command: |
            # Coverage is off by default
            if [[  "" == "$AFNI_WITH_COVERAGE" ]];then AFNI_WITH_COVERAGE="0";fi

            THISVERSION=$(cat src/AFNI_version_base.txt)
            echo "Building version ${CIRCLE_TAG:-$THISVERSION}"
            docker build \
              -f .docker/<< parameters.build_type >>.dockerfile \
              --rm=false \
              --tag afni/afni_<< parameters.build_type >>:latest \
              --build-arg BUILD_DATE="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
              --build-arg VCS_REF="$(git rev-parse --short HEAD)" \
              --build-arg AFNI_WITH_COVERAGE=$AFNI_WITH_COVERAGE \
              --build-arg VERSION="${CIRCLE_TAG:-$THISVERSION}" .

  run_afni_tests:
    description: "Use previously built image to execute tests"
    parameters:
      build_type:
        type: string
    steps:
      - run:
          name: Run tests
          no_output_timeout: 60m
          command: |

            tests_dir=tests/afni_ci_test_data
            vol_dir=/opt/afni/src/$tests_dir

            TEST_ARGS="--extra-args='--runveryslow' $TEST_ARGS -v traceback --u container"

            # Coverage is off by default
            if [[  "" == "$AFNI_WITH_COVERAGE" ]];then AFNI_WITH_COVERAGE="0";fi

            # Add coverage args as appropriate
            if [[ "$AFNI_WITH_COVERAGE" != "0" ]];then
              bash -c "echo Adding coverage because value is: $AFNI_WITH_COVERAGE"
              # Command to get coverage vars (used later by run_afni_tests.py:
              coverage_vars=$(bash -c 'bash <(curl -s https://codecov.io/env)')
              echo CircleCI coverage variables: $coverage_vars
              TEST_ARGS=" --coverage $TEST_ARGS --reuse-build"
            fi

            # some extra arguments for container management. Note that using
            # remote docker on circleci does not allow mounting volumes
            # directly into the container in the normal manner
            TEST_ARGS="$TEST_ARGS \
                        --image-name=afni/afni_<< parameters.build_type >> \
                        --container-name=testing_afni
                        --source-mode=test-data-volume \
                        --no-rm \
                        --only-use-local"

            echo ...$TEST_ARGS...
            # stop if running locally and it happens to exist...
            pre_existing=$(docker ps -aq --filter name=testing_afni)
            if [[ ! "" == "$pre_existing" ]];then docker stop testing_afni;docker rm testing_afni;fi

            # Run the tests
            /tmp/src/afni/tests/run_afni_tests.py $TEST_ARGS

            # after application container finishes, copy artifacts directly from it
            docker cp -a testing_afni:/opt/afni/src/tests/afni_ci_test_data/. /tmp/src/afni/tests/afni_ci_test_data


  check_integrity_of_containers:
    description: "Check some of the permissions/user/PATH basics of the containers"
    parameters:
      image_cache_version:
        type: string
    steps:
      - checkout_afni
      - setup_remote_docker:
          version: 19.03.13
      - setup_dev_base_image:
          image_cache_version: << parameters.image_cache_version >>
      - restore_afni_image_cache:
          build_type: cmake_build
          image_cache_version: << parameters.image_cache_version >>
      - restore_afni_image_cache:
          build_type: make_build
          image_cache_version: << parameters.image_cache_version >>
      - run: cd .docker; pytest

  deploy_to_dockerhub:
    description: "Push images to dockerhub"
    parameters:
      build_type:
        type: string
      image_cache_version:
        type: string
    steps:
      - setup_remote_docker:
          version: 19.03.13
      - restore_afni_image_cache:
          build_type: << parameters.build_type >>
          image_cache_version: << parameters.image_cache_version >>
      - run:
          name: Deploy to Docker Hub
          no_output_timeout: 40m
          command: |
            if [[ "$DOCKER_USER" == 'afni' ]]; then
              docker login -u "$DOCKER_USER" -p "$DOCKER_PASS"
              docker push afni/afni_<< parameters.build_type >>:latest
              docker tag afni/afni_<< parameters.build_type >> afni/afni_<< parameters.build_type >>:$CIRCLE_TAG
              docker push afni/afni_<< parameters.build_type >>:$CIRCLE_TAG
            fi
      # Push dev_base image too though it is unlikely to change
      - checkout_afni
      - setup_dev_base_image:
          image_cache_version: << parameters.image_cache_version >>
      - run:
          command: |
            if [[ "$DOCKER_USER" == 'afni' ]]; then
              if [[  "$(docker images -q afni/afni_dev_base 2> /dev/null)" == "" ]];
              then
                echo Could not find the dev_base image used for release deployment.
                exit 1
              else
                  docker push afni/afni_dev_base:latest
                  docker tag afni/afni_dev_base afni/afni_dev_base:$CIRCLE_TAG
                  docker push afni/afni_dev_base:$CIRCLE_TAG
              fi
            fi

  write_test_data_cache_version_file:
    description: "Determine commit id for the datalad tests directory."
    parameters:
      cache_name:
        type: string
    steps:
      - run:
          name: Retrieve id and write to a file
          command: |
            export test_data_info=$(git submodule status|grep afni_ci_test_data)
            echo ${test_data_info:1:40} > /tmp/<< parameters.cache_name >>_version.txt
            cat /tmp/<< parameters.cache_name >>_version.txt

  setup_macos_for_afni:
    description: "Install OSX dependencies and write out a dependencies file for cache versioning."
    parameters:
      osx_dep_cache_version:
        type: string
        default: "0"
    steps:
      - run:
          name: Write osx dependencies to a file
          command: |
            echo \
              python@3.8 \
              cmake ninja llvm pkgconfig  \
              jpeg gsl gts openmotif libpng expat \
              freetype fontconfig netpbm git-annex | \
              tr " " '\n' | sort > /tmp/macos_dependencies_version.txt
      # circleci caching works with files owned by user (distiller on osx
      # machines on circleci). If caching for macos is desired, homebrew files
      # should be stored in home or /usr/local chowned. One thread mentioned
      # that loading caches on macos is slower too so for now will not try to
      # get this working:
      # - restore_an_exact_cache:
      #     version: "<< parameters.osx_dep_cache_version >>"
      #     version_file: "/tmp/macos_dependencies_version.txt"
      - run:
          name: Setup on macos
          command: |
            brew cask install xquartz
            brew unlink python@2

            # add hack for git upgrade to not raise an error
            set +o pipefail
            brew upgrade --force git || true
            set -o pipefail

            # Python3.9 currently causes failure so 3.8 keg needs to be used:
            brew install python@3.8
            export PATH="/usr/local/opt/python@3.8/bin:$PATH"
            echo 'export PATH="/usr/local/opt/python@3.8/bin:$PATH"' >> /Users/distiller/.bash_profile
            export LDFLAGS="-L/usr/local/opt/python@3.8/lib $LDFLAGS"
            echo 'export LDFLAGS="-L/usr/local/opt/python@3.8/lib $LDFLAGS"' >> /Users/distiller/.bash_profile
            export PKG_CONFIG_PATH="/usr/local/opt/python@3.8/lib/pkgconfig"
            echo 'export PKG_CONFIG_PATH="/usr/local/opt/python@3.8/lib"' >> /Users/distiller/.bash_profile

            # Install dependency list
            cat /tmp/macos_dependencies_version.txt | xargs brew install
            # note other useful dependencies:
            # ffmpeg



      # - save_cache:
      #     key: v<< parameters.osx_dep_cache_version >>-/tmp/macos_dependencies_version.txt-{{ checksum "/tmp/macos_dependencies_version.txt" }}
      #     paths:
      #       - /usr/local

  restore_afni_image_cache:
    description: "Restore cache from the build_afni_image command"
    parameters:
      build_type:
        type: string
      image_cache_version:
        type: string
    steps:
      - restore_cache:
          key: v<< parameters.image_cache_version >>-docker-<< parameters.build_type >>-{{ .Revision }}
      - load_cached_docker_image_from_disk:
          image_name: afni_<< parameters.build_type >>

  save_docker_image_to_disk:
    description: "After an image is successfully built, write it to disk for circleci caching."
    parameters:
      image_name:
        type: string
    steps:
      - run:
          name: Docker save
          no_output_timeout: 40m
          command: |
            if [[ ! -f /tmp/cache/<< parameters.image_name >>_docker.tar.gz ]]; then
              mkdir -p /tmp/cache
              docker save afni/<< parameters.image_name >>:latest \
              | pigz -2 -p 3 > /tmp/cache/<< parameters.image_name >>_docker.tar.gz
            fi

  restore_a_cache:
    description: "Restore a cache based on a version file, with fallbacks used"
    parameters:
      version_file:
        type: string
      version:
        type: string
        default: "0"
    steps:
      - restore_cache:
          keys:
            # search for a cache for the current version file's checksum
            - v<< parameters.version >>-<< parameters.version_file >>-{{ checksum "<< parameters.version_file >>" }}
            # Load any pre-existing cache
            - v<< parameters.version >>-<< parameters.version_file >>-

  restore_an_exact_cache:
    description: "Restore a cache based on a version file, otherwise allow cache miss"
    parameters:
      version_file:
        type: string
      version:
        type: string
    steps:
      - restore_cache:
          keys:
            # search for a cache for the current version file's checksum
            - v<< parameters.version >>-<< parameters.version_file >>-{{ checksum "<< parameters.version_file >>" }}

  load_cached_docker_image_from_disk:
    description: "Restore cached image from disk to docker"
    parameters:
      image_name:
        type: string
    steps:
      - run:
          name: Load Docker image layer cache
          no_output_timeout: 30m
          command: |
            set +o pipefail
            if [[ -f /tmp/cache/<< parameters.image_name >>_docker.tar.gz ]]; then
              docker info
              zcat /tmp/cache/<< parameters.image_name >>_docker.tar.gz | docker load
              docker images
            fi

  checkout_afni:
    description: "Get afni code"
    steps:
      - checkout
      # useful for local debugging but fails on circleci
      # - run: |
      #     cd /tmp/src &&
      #     git clone --shared   --verbose --depth 1 \
      #       --local file:///tmp/_circleci_local_build_repo \
      #       afni


############################################################################
#Define jobs for building, testing, and deploying
############################################################################
jobs:
  build:
    working_directory: /tmp/src/afni
    parameters:
      build_type:
        type: string
      image_cache_version:
        type: string
    docker:
      - image: afni/afni_circleci_executor
    steps:
      - checkout_afni
      - setup_remote_docker:
          version: 19.03.13
      - build_afni_image:
          build_type: << parameters.build_type >>
          image_cache_version: << parameters.image_cache_version >>
      - save_docker_image_to_disk:
          image_name: afni_<< parameters.build_type >>
      - save_cache:
          # store a run specific cache for later steps... caching is used
          # instead of saving to the workspace because there are two builds
          # and the make_build cache is quite large so it would slow down
          # workspace loading for the cmake testing step
          key: v<< parameters.image_cache_version >>-docker-<< parameters.build_type >>-{{ .Revision }}-{{ epoch }}
          paths:
            - /tmp/cache/afni_<< parameters.build_type >>_docker.tar.gz


  containers_check:
    working_directory: /tmp/src/afni
    parameters:
      image_cache_version:
        type: string
    docker:
      - image: afni/afni_circleci_executor
    steps:
      - check_integrity_of_containers:
          image_cache_version: << parameters.image_cache_version >>

  test:
    working_directory: /tmp/src/afni
    parameters:
      build_type:
        type: string
      image_cache_version:
        type: string
      test_data_cache_version:
        type: string
    docker:
      - image: afni/afni_circleci_executor
    steps:
      - checkout_afni
      - setup_remote_docker:
          version: 19.03.13
      - write_test_data_cache_version_file:
          cache_name: test_data
      - restore_a_cache:
          version_file: "/tmp/test_data_version.txt"
          version: << parameters.test_data_cache_version >>
      - run:
          command: |
            cp /tmp/test_data_version.txt /tmp/src/afni/tests/afni_ci_test_data
      - restore_afni_image_cache:
          build_type: << parameters.build_type >>
          image_cache_version: << parameters.image_cache_version >>
      - run_afni_tests:
          build_type: << parameters.build_type >>
          # Save test data as cache for subsequent runs if ideal is not already saved
      - save_cache:
          key: v<< parameters.test_data_cache_version >>-/tmp/test_data_version.txt-{{ checksum "/tmp/test_data_version.txt" }}
          paths: /tmp/src/afni/tests/afni_ci_test_data

  deploy:
    working_directory: /tmp/src/afni
    parameters:
      build_type:
        type: string
      image_cache_version:
        type: string
    docker:
      - image: afni/afni_circleci_executor
    steps:
      - deploy_to_dockerhub:
          build_type: << parameters.build_type >>
          image_cache_version: << parameters.image_cache_version >>

  macos_build:
    working_directory: /tmp/src/afni
    macos:
        xcode: "11.2.1"
    steps: # a series of commands to run
      - checkout_afni
      - setup_macos_for_afni
      - run:
          name: Build on macos
          command: |
            mkdir build
            cd build
            cmake ..                                                           \
                -GNinja                                                             \
                -DCMAKE_TOOLCHAIN_FILE=../cmake/macos_toolchainfile.cmake      \
                -DUSE_SYSTEM_GLW=OFF    \
                -DUSE_SYSTEM_XMHTML=OFF \
                -DUSE_SYSTEM_F2C=OFF \
                -DCOMP_RSTATS=OFF \
                -DUSE_SYSTEM_GIFTI=OFF
            ninja

  coverage_check:
    working_directory: /tmp/src/afni
    parameters:
      image_cache_version:
        type: string
      test_data_cache_version:
        type: string
    # Environment variable AFNI_WITH_COVERAGE triggers an alternative build in the dockerfile and
    # a slightly different test command in run_afni_tests circleci command
    environment:
      AFNI_WITH_COVERAGE: true
    docker:
      - image: afni/afni_circleci_executor
    steps:
      - run: id # quick check to see who is running this!
      - checkout_afni
      - setup_remote_docker:
          version: 19.03.13
      - build_afni_image:
          build_type: cmake_build
          image_cache_version: << parameters.image_cache_version >>
      - run_afni_tests:
          build_type: cmake_build

############################################################################
#Define the  workflow to organize the execution of the jobs on circleci
############################################################################
workflows:
  version: 2.1
  afni_tests:
    jobs:
      - macos_build:
          requires:
            - test_cmake_build
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - build:
          name: cmake_build
          matrix:
            parameters:
              build_type: ["cmake_build"]
              # cache version should match for all jobs
              image_cache_version: ["0"]
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - build:
          name: make_build
          requires:
            - test_cmake_build
          matrix:
            parameters:
              build_type: ["make_build"]
              # cache version should match for all jobs
              image_cache_version: ["0"]
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - test:
          name: test_<< matrix.build_type >>
          matrix:
            parameters:
              build_type: ["make_build", "cmake_build"]
              # cache version should match for all jobs
              image_cache_version: ["0"]
              test_data_cache_version: ["0"]
          requires:
            - << matrix.build_type >>
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - containers_check:
          name: check containers for issues with users and permissions and environments
          matrix:
            parameters:
              # cache version should match for all jobs
              image_cache_version: ["0"]
          requires:
            - make_build
            - cmake_build
          filters:
            tags:
              only: /.*/
            branches:
              only: /.*/
      - deploy:
          name: deploy_<< matrix.build_type >>
          matrix:
            parameters:
              build_type: ["make_build", "cmake_build"]
              # cache version should match for all jobs
              image_cache_version: ["0"]
          requires:
            - test_<< matrix.build_type >>
            - macos_build
            - containers_check
          filters:
            tags:
              only: /AFNI_\d\d.\d.\d\d/
            branches:
              ignore: /.*/

      - coverage_check:
          requires:
            - test_cmake_build
            - test_make_build
          matrix:
            parameters:
              # cache version should match for all jobs
              image_cache_version: ["0"]
              test_data_cache_version: ["5"]
          filters:
            tags:
              only: /AFNI_\d\d.\d.\d\d/
            branches:
              only: /.*/
