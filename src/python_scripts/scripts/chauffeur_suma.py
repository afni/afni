#!/usr/bin/env python

# python3 status: compatible

### example run in ~/AFNI_data6/FT_analysis/FT/SUMA :
#  chauffeur_suma.py -surf_spec   ../SUMA/std.141*_?h.spec -surf_vol ../SUMA/FT_SurfVol.nii -prefix TEST
#
#
### example run in ~/AFNI_data6/FT_analysis/FT.surf.results:
#  chauffeur_suma.py -surf_spec   ../FT/SUMA/std.60*_?h.spec -surf_vol ../FT/SUMA/FT_SurfVol.nii -prefix TEST3 -dset_lh stats.FT.surf.lh.niml.dset -dset_rh stats.FT.surf.rh.niml.dset 
#
#
#
### and a more modern example:
# chauffeur_suma.py                                               \
#     -surf_spec std.60.FT_lh.spec std.60.FT_rh.spec              \
#     -surf_spec_dir /home/ptaylor/AFNI_data6/FT_analysis/FT/SUMA \
#     -surf_vol FT.surf_NEW_SurfVol_Alnd_Exp+orig.HEAD            \
#     -prefix APQC_SURF_001                                       \
#     -dset_lh stats.FT.surf_NEW.rh.niml.dset                     \
#     -dset_rh stats.FT.surf_NEW.rh.niml.dset


# system libraries
import sys, os

# AFNI libraries
from afnipy import lib_drive_suma as lds
from afnipy import lib_apqc_tcsh  as lat      # for str formatting

# -----------------------------------------------------------------------

#def main():
    #opts = lds.InOpts()
    #if not opts: return 1

    #rv = opts.execute()
    #if rv > 0: return 1

    #return opts.status

if __name__ == '__main__':

    opts    = lds.InOpts()
    if not opts:
        print('** ERROR: failed to even start processing options')
        sys.exit(-2)

    opts_ok = opts.process_options()
    if opts_ok > 0: 
        sys.exit(0)
    elif opts_ok < 0:
        print('** ERROR: failed when processing options')
        sys.exit(opts_ok)

    pars    = lds.suma_chauffeur_pars(opts)
    
    #    sys.exit(main())


    # ===================================================================

    # piece of the script

    str_FULL = '''#!/bin/tcsh -e\n\n'''

    str_FULL+= '''# A script automatically generated by chauffeur_suma.py\n'''

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Top level: background environment',
                         padpost=2 )
    str_FULL+= ban

    sss_benv, tmp = lds.build_cmds_from_dict(pars.all_benv, use_setenv=True)
    str_FULL+= lat.commandize( sss_benv, cmdindent=0, 
                               ALIGNASSIGN=False, ALLEOL=False,
                               padpost=1 )

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Top level: background vars',
                         padpost=2 )
    str_FULL+= ban

    sss_bvar, tmp = lds.build_cmds_from_dict(pars.all_bvar)
    str_FULL+= lat.commandize( sss_bvar, cmdindent=0, 
                               ALIGNASSIGN=True, ALLEOL=False,
                               padpost=1 )

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Top level: subject vars',
                         padpost=2 )
    str_FULL+= ban

    # string of surf (underlay) items
    sss_surf = '''
    set surf_spec_dir = "{surf_spec_dir}"
    set all_spec = ( {all_spec} )
    set surf_vol = "{surf_vol}"
    set all_hemi = ( {all_hemi} )
    set all_ldv  = ( {all_ldv} )
    set nspec    = ${{#all_spec}}
    '''.format( surf_spec_dir=pars.surf_spec_dir, 
                surf_vol=pars.surf_vol, 
                all_spec=' '.join(pars.surf_spec_list),
                all_hemi=' '.join(pars.surf_list_hemi),
                all_ldv =' '.join(pars.surf_list_ldv) )

    str_FULL+= lat.commandize( sss_surf, cmdindent=0, 
                               ALIGNASSIGN=True, ALLEOL=False,
                               padpost=2 )

    # string of dset (overlay) items
    if pars.dset_list_lh or pars.dset_list_rh :
        sss_dset = """# 'overlay' dsets
    set all_dset_lh = ( {all_dset_lh} )
    set all_dset_rh = ( {all_dset_rh} )
    set ndset_lh    = ${{#all_dset_lh}}
    set ndset_rh    = ${{#all_dset_rh}}
    """.format( all_dset_lh=' '.join(pars.dset_list_lh),
                all_dset_rh=' '.join(pars.dset_list_rh) )

        str_FULL+= lat.commandize( sss_dset, cmdindent=0, 
                                   ALIGNASSIGN=True, ALLEOL=False,
                                   padpost=2 )

    # string of subject vars
    sss_svar, tmp = lds.build_cmds_from_dict(pars.all_svar)
    str_FULL+= lat.commandize( sss_svar, cmdindent=0, 
                               ALIGNASSIGN=True, ALLEOL=False,
                               padpost=1 )

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Top level: make virtual frame',
                         padpost=1 )
    str_FULL+= ban

    sss_xvfb = lds.make_text_xvfb_frame()
    str_FULL+= sss_xvfb

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Surface mesh (underlay) settings',
                         padpost=2 )
    str_FULL+= ban

    # string of subject vars (and DriveSuma cmd)
    sss_ulay, drive_ulay = lds.build_cmds_from_dict(pars.all_ulay,
                                                    var_pre = 'u_',
                                                    build_drive_cmd = True)
    str_FULL+= lat.commandize( sss_ulay, cmdindent=0, 
                               ALIGNASSIGN=True, ALLEOL=False,
                               padpost=1 )

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Object (overlay) settings',
                         padpost=2 )
    str_FULL+= ban

    # string of subject vars (and DriveSuma cmd)
    sss_olay, drive_olay = lds.build_cmds_from_dict(pars.all_olay,
                                                    var_pre = 'o_',
                                                    build_drive_cmd = True)
    str_FULL+= lat.commandize( sss_olay, cmdindent=0, 
                               ALIGNASSIGN=True, ALLEOL=False,
                               padpost=1 )

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Start SUMA', 
                         padpost=2 )
    str_FULL+= ban

    sss_loop = lds.make_text_loop_hemi(pars, 
                                       drive_ulay=drive_ulay,
                                       drive_olay=drive_olay,
                                       ntoggle_spec=2)
    str_FULL+= sss_loop

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Finish images', 
                         padpost=2 )
    str_FULL+= ban

    sss_cat  = lds.make_text_cat_images()
    str_FULL+= sss_cat

    # -------------------------------------------------------------------------

    ban = lat.bannerize( 'Bottom level: exit messages',
                         padpost=1, padpre=2 )
    str_FULL+= ban

    sss_exit_bad  = lds.make_text_bad_exit()
    str_FULL     += sss_exit_bad

    sss_exit_good = lds.make_text_good_exit()
    str_FULL     += sss_exit_good

    # -------------------------------------------------------------------------
    # -------------------------------------------------------------------------

    if 1 :
        otcsh = 'do_test_drive_suma.tcsh'
        # write, chmod and finish

        fff = open(otcsh, 'w')
        fff.write(str_FULL)
        fff.close()

        # deal with python 2/3   27 Nov 2018 [rickr]
        try: code = eval('0o755')
        except: code = eval('0755')
        try:
            os.chmod(otcsh, code)
        except:
            omsg = "failed: chmod {} {}".format(code, otcsh)
            print(omsg)

        bye_msg = '''
        ++ Done making (executable) script to generate HTML QC. Run it with:
        tcsh {}
        '''.format(otcsh)

        bye_msg = lat.commandize(bye_msg, ALLEOL=False)
        print( bye_msg )

    
    sys.exit(0)

