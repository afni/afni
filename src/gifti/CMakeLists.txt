# This project is designed to be built outside the source tree.
# File generated by Simon K. Warfield simon.warfield@childrens.harvard.edu
# with support from NIH grant RR021885.
project(gifticlib)
cmake_minimum_required(VERSION 2.6)

# install destinations
set(GIFTI_INSTALL_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin")
set(GIFTI_INSTALL_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib")
set(GIFTI_INSTALL_INCLUDE_DIR "${CMAKE_INSTALL_PREFIX}/include/gifti")

find_package(ITK)
if(ITK_FOUND)
# ITK provides expat and zlib.
   include(${ITK_USE_FILE})
   set(EXPAT_LIBRARIES ITKEXPAT)
   set(ZLIB_LIBRARIES ITKznz)
   set(NIFTI_LIBRARIES ITKniftiio)
else(ITK_FOUND)
# Otherwise, get it from elsewhere.
  find_package(EXPAT)
  find_package(ZLIB)
  find_library(NIFTI_LIBRARY NAMES niftiio PATH /usr/local/nifti/lib )
  set(NIFTI_LIBRARIES ${NIFTI_LIBRARY} znz m)
  find_path(NIFTI_INCLUDE_DIR nifti1.h /usr/local/nifti/include/nifti
                                       /usr/include/nifti)
  get_filename_component(GIFTI_LINK_DIRECTORIES ${NIFTI_LIBRARY} PATH)
  link_directories(${GIFTI_LINK_DIRECTORIES})
  include_directories(${NIFTI_INCLUDE_DIR})
endif(ITK_FOUND)

# shared library API versioning -- NOT the same as the release version
set(GIFTI_SHAREDLIB_VERSION "0.0.0")
string( REGEX MATCH "^[0-9]+" GIFTI_SHAREDLIB_SOVERSION ${GIFTI_SHAREDLIB_VERSION})
set(GIFTI_LIBRARY_PROPERTIES VERSION ${GIFTI_SHAREDLIB_VERSION} SOVERSION ${GIFTI_SHAREDLIB_SOVERSION})

if(ZLIB_FOUND)
  add_definitions(-DHAVE_ZLIB)
endif(ZLIB_FOUND)

include_directories(
${CRKIT_SOURCE_DIR}/External
${gifticlib_SOURCE_DIR}
${gifticlib_BINARY_DIR}
)

set(GIFTIIO_SRC gifti_io.c gifti_xml.c)

# shared version
add_library(giftiio SHARED ${GIFTIIO_SRC})
# Set library version when building shared libs.
set_target_properties(giftiio PROPERTIES ${GIFTI_LIBRARY_PROPERTIES})
target_link_libraries(giftiio ${EXPAT_LIBRARIES} ${NIFTI_LIBRARIES})
if(ZLIB_FOUND)
  target_link_libraries(giftiio ${ZLIB_LIBRARIES})
endif(ZLIB_FOUND)

# static version
add_library(giftiio_static STATIC ${GIFTIIO_SRC})
#The library target "via_static" has a default OUTPUT_NAME of "via_static", can be changed with
set_target_properties(giftiio_static PROPERTIES ${GIFTI_LIBRARY_PROPERTIES} OUTPUT_NAME "giftiio")

link_directories(${gifticlib_BINARY_DIR})

add_executable(gifti_tool gifti_tool.c)
target_link_libraries(gifti_tool giftiio ${EXPAT_LIBRARIES} ${ZLIB_LIBRARIES} ${NIFTI_LIBRARIES})

add_executable(gifti_test gifti_test.c)
target_link_libraries(gifti_test giftiio ${EXPAT_LIBRARIES} ${ZLIB_LIBRARIES} ${NIFTI_LIBRARIES})

# binaries
install(TARGETS giftiio giftiio_static gifti_tool gifti_test
    RUNTIME DESTINATION ${GIFTI_INSTALL_BIN_DIR} COMPONENT RuntimeLibraries
    LIBRARY DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT RuntimeLibraries
    ARCHIVE DESTINATION ${GIFTI_INSTALL_LIB_DIR} COMPONENT Development)

# headers
install(FILES gifti_io.h gifti_xml.h
    DESTINATION ${GIFTI_INSTALL_INCLUDE_DIR}
    COMPONENT Development)
