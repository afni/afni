#!/bin/tcsh -f

# make surface spec files from the surface files
#
# usage @SUMA_Make_Spec_FS [options]
#
# options:  -sid	subject_id	: specify subject ID
#	    -fspath	FreeSurfer_path : specify path to FreeSurfer files
#	    -neuro			: use neurological orientation
#	    -flpLRsurf			: flip surface left to right
#           -debug      level		: display extra output
#

#----------------------------------------------------------------------
# this is a user-definable section

set surf_attribs = (	smoothwm		\
			pial			\
			inflated		\
			occip.patch3d		\
			occip.patch.flat	\
			sphere			\
			)
# -- end user defines -------------------------------------------------


goto L_INIT_VARS
     L_INIT_VARS_DONE:

goto L_CHECK_USAGE
     L_CHECK_USAGE_DONE:

goto L_PARSE_COMMAND
     L_PARSE_COMMAND_DONE:

goto L_VERIFY_PROGRAMS
     L_VERIFY_PROGRAMS_DONE:

goto L_SET_SURF_DIRS
     L_SET_SURF_DIRS_DONE:

goto L_CHECK_FOR_OVERWRITE
     L_CHECK_FOR_OVERWRITE_DONE:

goto L_LOOK_FOR_SURF
     L_LOOK_FOR_SURF_DONE:

goto L_CONVERT_SURFACES
     L_CONVERT_SURFACES_DONE:

goto L_CREATE_SPEC
     L_CREATE_SPEC_DONE:

goto L_CREATE_BRICK
     L_CREATE_BRICK_DONE:

goto L_TEST_SURF_VOL
     L_TEST_SURF_VOL_DONE:

set endstr = "$0 ... finished"
goto L_GOOD_END	# finished, woohooo!


####################################################################
# variable initialization

L_INIT_VARS:

set start_dir = $cwd
set endstr    = done
set debug     = 0

goto L_INIT_VARS_DONE


####################################################################
# check usage, and possibly print help

L_CHECK_USAGE:

    if ( $#argv == 0 ) then
	echo "usage: $0 [options] -sid SUBJECT_ID"
	echo "usage: $0 -help"
	set endstr = ""
	goto L_GOOD_END
    endif

goto L_CHECK_USAGE_DONE


####################################################################
# parse the command line

L_PARSE_COMMAND:

    # init command line arg values

    set fs_path		= "./"
    set subj_id		= ""
    set neuro_ori	= 0
    set flip_lr_surf	= 0

    set args     = $#argv
    set count    = 1

    while ( $count <= $args )
	switch ( "$argv[$count]" )

	    # ----------------------------------------------------------
	    # usage: -help
	    case "-h":
	    case "-help":

		goto L_HELP_END

	    breaksw

	    # ----------------------------------------------------------
	    # usage: -sid SUBJECT_ID
	    case "-sid":

		if ( $count >= $args ) then
		    set endstr = "arg usage: -sid SUBJECT_ID"
		    goto L_BAD_END
		endif

		@ count ++
		set subj_id  = $argv[$count]

	    breaksw

	    # ----------------------------------------------------------
	    # usage: -fspath FREESURFER_PATH
	    case "-fspath":

		if ( $count >= $args ) then
		    set endstr = "arg usage: -fspath FREESURFER_PATH"
		    goto L_BAD_END
		endif

		@ count ++
		set fs_path  = $argv[$count]

	    breaksw

	    # ----------------------------------------------------------
	    # usage : -neuro
	    case "-neuro":

		set neuro_ori = 1

	    breaksw

	    # ----------------------------------------------------------
	    # usage : -flpLRsurf
	    case "-flpLRsurf":

		set flip_lr_surf = 1

	    breaksw

	    # ----------------------------------------------------------
	    # usage : -debug DEBUG_LEVEL
	    case "-debug":

		if ( $count >= $args ) then
		    set endstr = "arg usage: -debug DEBUG_LEVEL"
		    goto L_BAD_END
		endif

		@ count ++
		set debug = $argv[$count]

		if ( "$debug" > 2 ) set debug = 2
		if ( "$debug" < 0 ) set debug = 0

	    breaksw

	    # ----------------------------------------------------------
	    # bad argument
	    default:

		set endstr = "invalid option: '$argv[$count]'"
		goto L_BAD_END

	    breaksw
	endsw

	@ count ++
    end

    if ( $subj_id == "" ) then
	set endstr = "missing required option: -sid"
	goto L_BAD_END
    endif

    if ( $debug ) echo "++ usage okay"
    if ( $debug > 1 ) set echo

    set spec_files   = ( SUMA_{$subj_id}_lh.spec SUMA_{$subj_id}_rh.spec )
    set afni_prefix  = ${subj_id}_SurfVol
    set afni_dataset = $afni_prefix+orig

goto L_PARSE_COMMAND_DONE


####################################################################
# make sure programs exist

L_VERIFY_PROGRAMS:

    set failed_pgms = 0
    foreach test_command ( afni to3d suma mris_convert )

	which $test_command >& /dev/null

	if ( $status ) then
	    echo "program not found in path: $test_command"
	    @ failed_pgms ++
	endif
    end

    if ( $failed_pgms ) then
	set endstr = "$failed_pgms program(s) not found"
	goto L_BAD_END
    endif

    if ( $debug ) echo "++ all programs found"

goto L_VERIFY_PROGRAMS_DONE


####################################################################
# 1. set surf_dir and orig_dir - check cwd and parent
# 2. create SUMA directory under surf_dir and store the results there

L_SET_SURF_DIRS:

    # find surf directory

    if ( -d surf ) then
	set surf_dir = ./surf
    else if ( $cwd:t == surf ) then
	set surf_dir = .
    else if ( -d ../surf ) then
	set surf_dir = ../surf
    else
	set surf_dirs = ( `find $fs_path -maxdepth 4 -type d -name surf` )
	
	if ( $#surf_dirs == 0 ) then
	    echo "failure: cannot find directory 'surf' under $fs_path"
	    echo "Directory 'surf' cannot be more than 4 subdirectories below"
	    echo "top directory '$fs_path'."

	    set endstr = ""
	else if ( $#surf_dirs == 1 ) then
	    echo "surf directory found at $surf_dirs[1]"
	    set endstr = "consider running program from $surf_dirs[1]"
	else
	    echo "multiple surf directories found:"
	    set count = 1
	    while ( $count <= $#surf_dirs )
		echo "     $surf_dirs[$count]"
		@ count ++
	    end

	    set endstr = "consider running program from one of the " \
			 "surf directories"
	endif

	goto L_BAD_END
    endif

    # verify surf dir permissions
    if ( ! -w $surf_dir ) then
	set endstr = "failure: no write permissions for directory '$surf_dir'"
	goto L_BAD_END
    endif

    if ( $debug ) echo "++ using surf directory '$surf_dir'..."

    # now check for orig dir

    if ( -d mri/orig ) then
	set orig_dir = mri/orig
    else if ( -d orig ) then
	set orig_dir = orig
    else if ( -d ../mri/orig ) then
	set orig_dir = ../mri/orig
    else
	set endstr = "failure: cannot find directory 'orig' under $fs_path"
	goto L_BAD_END
    endif

    # verify orig dir permissions
    if ( ! -w $orig_dir ) then
	set endstr = "failure: no write permissions for directory '$orig_dir'"
	goto L_BAD_END
    endif

    if ( $debug ) echo "++ using orig directory '$orig_dir'..."

    # decide whether we need to make surf/SUMA directory

    set suma_dir = $surf_dir/SUMA

    if ( -d $suma_dir ) then
	if ( $debug ) echo "++ $suma_dir already exists, continuing..."
    else
	echo "++ creating directory '$suma_dir' for results..."
	mkdir $suma_dir
	if ( $status ) then
	    set endstr = "failure: cannot create directory '$suma_dir'"
	    goto L_BAD_END
	endif
    endif

goto L_SET_SURF_DIRS_DONE


####################################################################
# verify non-existence of spec files and AFNI files

L_CHECK_FOR_OVERWRITE:

    set overwrite_failures = 0

    # spec files
    if ( -f $suma_dir/$spec_files[1] || -f $suma_dir/$spec_files[2] ) then
        echo "failure: will not overwrite files: "
	echo "        '$suma_dir/$spec_files[1]'"
	echo "        '$suma_dir/$spec_files[2]'"

	set overwrite_failures = 1
    endif

    # AFNI files
    if ( -f $orig_dir/$afni_dataset.HEAD ||	\
	 -f $orig_dir/$afni_dataset.BRIK ) then

        echo "failure: will not overwrite files: "
	echo "        '$orig_dir/$afni_dataset.HEAD'"
        echo "        '$orig_dir/$afni_dataset.BRIK'"

	set overwrite_failures = 1
    endif

    if ( -f $suma_dir/$afni_dataset.HEAD ||  \
              -f $suma_dir/$afni_dataset.BRIK ) then

        echo "failure: will not overwrite files:"
	echo "        '$suma_dir/$afni_dataset.HEAD'"
        echo "        '$suma_dir/$afni_dataset.BRIK'"

	set overwrite_failures = 1
    endif

    if ( $overwrite_failures ) then
        set endstr = "please remove the files to continue"
	goto L_BAD_END
    endif

goto L_CHECK_FOR_OVERWRITE_DONE

####################################################################
# find surface files

L_LOOK_FOR_SURF:

    cd $surf_dir

    set list_lh = ""
    set list_rh = ""

    foreach attrib ( $surf_attribs )
	set surf_lh = lh.$attrib
	set surf_rh = rh.$attrib
	if ( -f $surf_lh ) set list_lh = ( $list_lh $surf_lh )
	if ( -f $surf_rh ) set list_rh = ( $list_rh $surf_rh )
    end

    if ( $#list_lh == 0 && $#list_rh == 0 ) then
	set endstr = "found no surface files under directory: $surf_dir"
	goto L_BAD_END
    endif

    if ( $#list_lh > 0 ) then
	echo "++ found $#list_lh LH surfaces : "
	echo "       " $list_lh
	echo ""
    endif

    if ( $#list_rh > 0 ) then
	echo "++ found $#list_rh RH surfaces : "
	echo "       " $list_rh
	echo ""
    endif

    cd $start_dir

goto L_LOOK_FOR_SURF_DONE


####################################################################
# convert to ascii via mris_convert (found earlier)

L_CONVERT_SURFACES:

    # todo - account for flip_lr_surf

    cd $surf_dir
    foreach surf ( $list_lh $list_rh )
	# run mris_convert and verify
	if ( $surf =~ *patch* ) then
	    echo "-- running 'mris_convert $surf $surf.asc'"
	    mris_convert $surf $surf.asc
	else
	    echo  "-- running 'mris_convert -p $surf $surf.asc'"
	    mris_convert -p $surf $surf.asc
	endif

	if ( ! -f $surf.asc ) then
	    echo "failure: could not create surface $surf.asc"

	    if ( ! -w . ) then
		set endstr = "--> no write permissions in this directory"
	    else
		set endstr = "--> is your FreeSurfer license set up?"
	    endif

	    goto L_BAD_END
	else
	    if ( $debug ) then
		echo "++ $surf.asc created"
		if ( -f $start_dir/$suma_dir/$surf.asc ) then
		    echo "++ overwriting '$suma_dir/$surf.asc'"
		endif
	    endif

	    \mv -f $surf.asc $start_dir/$suma_dir	# how barbaric!

	    if ( $status ) then
		set endstr = ( "failure: cannot overwrite"	\
			       "'$start_dir/$suma_dir/$surf.asc'" )
		goto L_BAD_END
	    endif
	endif
    end

    cd $start_dir

goto L_CONVERT_SURFACES_DONE


####################################################################
# actually create the spec file

L_CREATE_SPEC:

    cd $suma_dir

    foreach hand ( lh rh )
 	if ( $hand == lh ) then
	    set list_cur = ( $list_lh )		# get a current list copy
	else
	    set list_cur = ( $list_rh )
	endif

	set spec_file = SUMA_{$subj_id}_$hand.spec

	if ( $debug ) echo "++ creating spec file '$spec_file'..."

	(echo "# delimits comments" > $spec_file) >& /dev/null

	if ( $status ) then
	    set endstr = ( "failure: no permissions to create spec file" \
			 "'$surf_dir/$spec_file'" )
	    goto L_BAD_END
	endif

	# note user, date, machine, pwd, command line
	echo ""							>> $spec_file
	echo "# Creation information:"				>> $spec_file
	echo "#     user    : $user"				>> $spec_file
	echo "#     date    : `date`"				>> $spec_file
	echo "#     machine : `uname -n`"			>> $spec_file
	echo "#     pwd     : $cwd"				>> $spec_file
	echo "#     command : $0 $argv"				>> $spec_file
	echo ""							>> $spec_file
	
	# define the group
	echo "# define the group"				>> $spec_file
	echo "        Group = $subj_id"				>> $spec_file
	echo ""							>> $spec_file

	# define the states
	echo "# define various States"				>> $spec_file
	foreach attrib ( $surf_attribs )
	    echo "        StateDef = $attrib"			>> $spec_file
	end
	echo ""							>> $spec_file

	foreach surf ( $list_cur )
	    set s_head = `echo $surf | cut -d. -f1`	# up to first '.'
	    set s_state = `echo $surf | cut -d. -f2-`	# after first '.'

	    # check for SAME mapping ref
	    if ( "$surf.asc" == "$s_head.smoothwm.asc" ) then
		set map_ref = SAME
	    else
		set map_ref = $s_head.smoothwm.asc
	    endif

	    # EmbedDimension is 2 for flat surfaces, else 3
	    echo $surf | grep flat >& /dev/null
	    if ( $surf =~ *flat* ) then
		set embed_ref = 2
	    else
		set embed_ref = 3
	    endif

	    echo "NewSurface"					>> $spec_file
	    echo "        SurfaceFormat = ASCII"		>> $spec_file
	    echo "        SurfaceType = FreeSurfer"		>> $spec_file
	    echo "        FreeSurferSurface = $surf.asc"	>> $spec_file
	    echo "        MappingRef = $map_ref"		>> $spec_file
	    echo "        SurfaceState = $s_state"		>> $spec_file
	    echo "        EmbedDimension = $embed_ref"		>> $spec_file
	    echo ""						>> $spec_file
	end

	echo "++ created spec file'$suma_dir/$spec_file'"
    end 	# foreach hand

    cd $start_dir

goto L_CREATE_SPEC_DONE


####################################################################
# actually create an AFNI dataset

L_CREATE_BRICK:

    cd $orig_dir

    # verify existence of 256 COR files
    set cor_files = ( COR-??? ) >& /dev/null
    if ( $status ) then
	set endstr = "failure: did not find COR files under '$orig_dir'"
	goto L_BAD_END
    else if ( $#cor_files != 256 ) then
	set endstr = "failure: 256 COR files required under '$orig_dir'"
	goto L_BAD_END
    endif

    # create BRIK with to3d

    if ( $neuro_ori == 1 ) then
	to3d -prefix $afni_prefix -xSLAB 127.5L-R -ySLAB 127.5S-I \
	     -zSLAB 127.5P-A $cor_files
    else
	to3d -prefix $afni_prefix -xSLAB 127.5R-L -ySLAB 127.5S-I \
	     -zSLAB 127.5P-A $cor_files
    endif

    mv $afni_dataset.HEAD $afni_dataset.BRIK $start_dir/$suma_dir

    echo "++ created AFNI file '$suma_dir/$afni_dataset.HEAD'"
    echo "++ created AFNI file '$suma_dir/$afni_dataset.BRIK'"

    cd $start_dir

goto L_CREATE_BRICK_DONE


####################################################################
# echo details for the user to launch suma and afni, in order to
* check the alignment

L_TEST_SURF_VOL:

    echo ""
    echo "------------------------------------------------------------"
    echo "Please verify that the datasets are aligned properly in both"
    echo "afni and suma.  You may do this by running the following commands:"
    echo ""
    echo "    cd $suma_dir"
    echo "    afni -niml &"
    echo "    suma -spec $spec_file -vp -afni_dataset"

goto L_TEST_SURF_VOL_DONE


####################################################################
# display help and exit

L_HELP_END:

    echo "yeah, you need help..."

    echo ""
    echo "If you don't get help here, please get help somewhere..."
    echo ""

    exit


####################################################################
# failure!

L_BAD_END:

    echo ""
    if ( "$endstr" != "" ) echo "$endstr"
    echo program failure: exiting...
    echo ""

    exit

####################################################################
# finished!

L_GOOD_END:

    if ( $debug > 1 ) unset echo

    echo ""
    if ( "$endstr" != "" ) then
	echo "$endstr"
	echo ""
    endif

    exit	# just to be consistent

