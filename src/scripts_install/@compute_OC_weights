#!/bin/tcsh

# compute optimally combining weights for echoes
#
# inputs:  echo times and one run of multi-echo EPI data
# outputs: a multi-volume dataset of voxelwise weights
#
# use:     OC for a run would be the sum of each echo time series times
#          its computed weight.
#
#          Voxels that do not solve to an appropriate decay will get the
#          average of the echoes (unless a better idea comes along).
#
# Should this be left as a little script or turned into a
# more formal python program?  Either way, add some options...

# system of equations from Javier's presentation:
#
#   mean(S(TE_1)) ~= R(x)*TE_1 + log(So(x))
#   mean(S(TE_2)) ~= R(x)*TE_2 + log(So(x))
#   mean(S(TE_3)) ~= R(x)*TE_3 + log(So(x))

# example dset: pb01.SUBJECT.c.NLtlrc.r01.e01.volreg+tlrc.HEAD

# ** note: in step 6.prod, a bad TE will imply equal weights across echoes

set VERSION = 0.2
set prog = @compute_OC_weights

goto RUN
HIST:
cat << EOF

history for $prog :

   0.0  12 Feb 2018 - a quick working copy
   0.1  12 Feb 2018 - with some options
   0.2  13 Feb 2018 - reasonable option list and basic help

EOF
exit
RUN:


set etimes_file = ''
set echo_dsets = ()
set necho = 0
set prefix = OC_weights
set results_dir = OC.weight.results
set root_dir = `pwd`
set verb = 1

if ( $#argv < 1 ) goto HELP

set ac = 1
while ( $ac <= $#argv )
   if ( "$argv[$ac]" == "-help" || "$argv[$ac]" == "-h" ) then
      goto HELP
   else if ( "$argv[$ac]" == "-hist" ) then
      goto HIST

   else if ( "$argv[$ac]" == "-echo_times_file" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** missing parameter for option '-echo_times_file'"
         exit 1
      endif
      set etimes_file = $argv[$ac]

   else if ( "$argv[$ac]" == "-echo_dsets" ) then
      @ ac ++
      set acbase = $ac
      while ( $ac <= $#argv )
         set o0 = "`echo $argv[$ac] | cut -b 1`"
         if ( "$o0" == '-' ) break
         # have something
         @ ac += 1
      end

      # ac index is never good here
      @ ac -= 1

      if ( $ac < ($acbase + 1) ) then
         echo "** -echo_dsets requires at least 2 datasets"
         exit 1
      endif

      # take them as echo datasets
      set echo_dsets = ( $argv[$acbase-$ac] )

   else if ( "$argv[$ac]" == "-prefix" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** missing parameter for option '-prefix'"
         exit 1
      endif
      set prefix = $argv[$ac]

   else if ( "$argv[$ac]" == "-results_dir" ) then
      @ ac ++
      if ( $ac > $#argv ) then
         echo "** missing parameter for option '-results_dir'"
         exit 1
      endif
      set results_dir = $argv[$ac]
   else if ( "$argv[$ac]" == "-verb" ) then
      @ verb += 1
      if ( $verb > 2 ) then
         set echo
      endif
   else
      echo "** bad option $ac : '$argv[$ac]'"
   endif

   @ ac += 1
end

# check for required parameters
if ( ! -f "$etimes_file" ) then
   echo "** missing -echo_times_file $etimes_file"
   exit 1
endif

if ( $#echo_dsets < 2 ) then
   echo "** must have at least 2 -echo_dsets files"
   exit 1
endif

# check for echo times, and compare against num EPI datasets
set necho = `1dcat $etimes_file | wc -w`
if ( $necho == 0 ) then
   echo "** missing -echo_times_file $etimes_file"
   exit 1
endif

if ( $necho != $#echo_dsets ) then
   echo "** have $necho echo times, but $#echo_dsets echo datasets"
   exit 1
endif


# try to set the view
set view = `3dinfo -av_space $echo_dsets[1]`
if ( "$view" == "NO-DSET" || "$view" == "" ) then
   echo "** failed to set view from $echo_dsets[1]"
   exit 1
endif

if ( $verb ) echo "-- have $necho echoes"
if ( $verb == 2 ) echo "-- have view $view"

set eind_list = ( `count -digits 1 1 $necho` )

if ( -d $results_dir ) then
   echo "** output dir $results_dir already exists, exiting..."
   exit 1
endif

mkdir $results_dir

# ----------------------------------------------------------------------
# get inputs or basic computations into working directory

# get means for each echo
foreach eind ( $eind_list ) 
   3dTstat -mean -prefix $results_dir/s1.mean.e$eind $echo_dsets[$eind]
end

# copy echo times file into working dir and adjust var
cp $etimes_file $results_dir
set etimes_file = $etimes_file:t

# ----------------------------------------------------------------------
# enter results dir and proceed
cd $results_dir

# get means for each echo
foreach eind ( $eind_list ) 
   3dcalc -a s1.mean.e$eind$view -expr 'log(a)' -prefix s2.log.e$eind
end

# "temporal" catenation
3dTcat -TR 1 -prefix s3.tcat.logs s2.log.e*.HEAD


# regress to solve for R(x) and log(So(x))
3dDeconvolve -input s3.tcat.logs$view   \
        -polort 0                       \
        -num_stimts 1                   \
        -stim_file 1 $etimes_file       \
        -x1D x.xmat.1D                  \
        -fitts s4.fitts                 \
        -bucket s4.bucket               \
        -bout

# output volumes are:
#    0 : full-F
#    1 : constant term : log(S0(x))
#    2 : linear term   : -R2(x)

# separate T2-star volume
3dcalc -a s4.bucket$view'[2]' -expr -a -prefix s5.t2.star

# make a product time series (for any <= 0 values, replace with 1)
# TE_n * e^-(TE_n/t2star)
3dcalc -a s5.t2.star$view -b $etimes_file \
       -expr 'step(a)*b*exp(-b/a)+(1-step(a))' -prefix s6.prod

# and sum
3dTstat -sum -prefix s7.sum.te s6.prod$view

# make a time series of weights per echo, which is now just prod/sum
3dcalc -a s6.prod$view -b s7.sum.te$view -expr a/b -prefix s8.weight

# copy back to $prefix
cd $root_dir
3dbucket -prefix $prefix $results_dir/s8.weight$view

if ( $status ) then
   echo "** failed to create $prefix"
else if ( $verb ) then
   echo "++ output written to $prefix"
endif

exit 0

HELP:
cat << EOF

$prog           - compute optimally combined weights dataset

   Given echo times (in a text file) and one run of multi-echo EPI data,
   compute a dataset that can be used to combine the echoes.  The weight
   dataset would have one volume per echo, which can be used to combine
   the echoes into a single dataset.  The same echoes can be applied to
   all runs.

    3dcalc -a echo1+tlrc        -b echo2+tlrc        -c echo3+tlrc        \
           -d weights+tlrc'[0]' -e weights+tlrc'[1]' -f weights+tlrc'[2]' \
           -expr 'a*d+b*e+c*f'  -prefix opt.combined

  Options:

    required parameters:

       -echo_times_file FILE    - specify file with echo times
                                  (e.g. it could contain 10 20.5 30)

             -echo_times_file echo_times.1D

       -echo_dsets D1 D2 D3     - specify one run of multi-echo EPI data, e.g.:

             -echo_dsets pb03.SUBJ.r01.e*.volreg+tlrc.HEAD

    optional parameters:

       -prefix PREFIX           - specify prefix of resulting OC weights dataset

             -prefix OC.weights.SUBJ

       -results_dir RDIR        - specify directory to compute results in

             -results_dir temp.OC

       -verb                    - increase verbosity of output

    general parameters:

       -help
       -hist
       -ver

  
EOF
