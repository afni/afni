#! /bin/tcsh -fx

# HJ is welding 3 scripts. 

if ("$1" == "" || "$1" == '-h' || "$2" == '-help') then
   goto HELP
endif

goto PARSE
RETURN_PARSE:


# path of ROI index & Zero+orig Files 
set init_path = "$PWD"


echo "Input File:"${fn_epi}
echo "Mask File:"${fn_msk}

# Number of Time Points
set N = `3dnvals $fn_epi`
if ($N < 4) then
   echo "epi has less than $N time points!"
   goto END
endif

JUMP_POINT:
#goto WORK_1D



RESAMPLE_msk2epi:
echo "Resampling mask to epi with NN ..."
3dresample  -input $fn_msk -master $fn_epi    \
            -prefix msk_resam    -overwrite  \
            -rmode NN   
if ($status) goto END

set fn_msk = msk_resam+orig

MAKE_ROW_FILE:
if ("$rowfile" == "") then
   #rowfile must have a .1D extension
   set rowfile = 2droi.row.1D
   set master = master.$rowfile:r
   3dRank -overwrite -prefix ___rnk -input $fn_msk 
   set fval = `1dcat ___rnk.rankmap.1D'[1]{0}'`
   if ( $fval == 0 ) then
      1dcat ___rnk.rankmap.1D'[1]{1..$}'\' > $rowfile
   else
      1dcat ___rnk.rankmap.1D'[1]{1..$}'\' > $rowfile
   endif
   rm -f ___rnk* >& /dev/null
else 
   set master = master.$rowfile:r
endif

MAKE_MASTER_VOL:
set nroi = `3dnvals $rowfile`
3dUndump -overwrite -prefix $master -dimen $nroi $nroi 1


EXTRACT:
echo "[Extract ROI 1D Signals]"
mkdir 1D

foreach k (`1dcat ${rowfile}`)
    echo "ROI: "${k}
    3dmaskave -mask ${fn_msk} -mrange ${k} ${k} ${fn_epi} > 1D/ROI_${k}.1D
    if ($status) goto END
    1dtranspose 1D/ROI_${k}.1D'[0]' > 1D/temp.1D
    cat 1D/temp.1D >> 1D/TS_ALL.1D
end
# TS_ALL.1D : Time series file is Row-by-Row form, it contains :
# ROI_1's TS_1 TS_2 ... TS_N
# ROI_1's TS_1 TS_2 ... TS_N
# .
# .
# .
# ROI_M's TS_1 TS_2 ... TS_N

WORK_1D:
cd 1D

##
echo "[Get r- and z-maps from 1D Time-Series]"

echo "Get Corr. Coeff."
1dtranspose TS_ALL.1D > TS_ALL.1D_T
1ddot -terse TS_ALL.1D_T > TS_ALL.corr

echo "Get Z-val."
set cc=0
foreach k (`1dcat ${init_path}/${rowfile}`)
    eval `1dcat TS_ALL.corr'['${cc}']' > temp`
    1deval -a temp -expr '0.5*log((1+a)/(1-a))*sqrt('${N}'-3)' > temp.zval
    if ($status) goto END
    1dtranspose temp.zval >> TS_ALL.zval.1D
    if ($status) goto END
    set cc = `ccalc -i -expr "$cc +1 "`
end
rm temp*

####

set i = 0

foreach ii (`1dcat ${init_path}/${rowfile}`)
    3dcalc  -a ${init_path}/${master}+orig \
            -b 'I:TS_ALL.zval.1D['${i}']' \
            -expr 'a+b*equals(j,'${i}')*step(i-j)' \
            -overwrite  \
            -prefix ${master}
    if ($status) goto END
    set i = `ccalc -i -expr "$i+1"`
end

mv ${master}+orig.HEAD ${init_path}/TS_ALL.zval+orig.HEAD
mv ${master}+orig.BRIK ${init_path}/TS_ALL.zval+orig.BRIK

# Don't forget we're under 1D folder.
cd ..

echo " done"
goto END

HELP:
   echo "Usage `basename $0` <-ts TimeSeriesVol> <-roi ROIVol>"
   echo ""
   echo "Script to produce an ROI correlation matrix."
   echo ""
   echo "Note: This script will resample the ROI volume to match the resolution"
   echo "of the EPI if the number of voxels in each of the three directions"
   echo "is not the same. ROIs are resampled using NN interpolation. If you'd"
   echo "rather interpolate the epi, then do so before you run this script"
   echo ""
   echo "Example:"
   echo "`basename $0` -ts s620_rest_r1+orig -roi SUMA/aparc.a2005s+aseg.nii"
   echo ""
   goto END
   
PARSE:
	echo "Parsing ..."
	set Narg = $#
	
	#find the locations of -ts and -roi, etc
	set cnt = 1
	set fn_msk = ''
	set fn_epi = ''
   set rowfile = ''
   while ($cnt <= $Narg)
		if ("$argv[$cnt]" == "-rowfile") then
         set SubLoc = $cnt		
		   if ($SubLoc == $Narg) then
				echo "Need option after -rowfile"
            goto END
			else
				@ cnt ++
				set rowfile = "$argv[$cnt]"
            if ("${rowfile:r}.1D" != "$rowfile") then
               echo "rowfile must have a .1D extension"
            endif
            set NxtInd = $cnt
			endif
      endif
		if ("$argv[$cnt]" == "-ts") then
         set SufLoc = $cnt		
		   if ($SufLoc == $Narg) then
				echo "Need option after -ts"
            goto END
			else
				@ cnt ++
            set fn_epi = "$argv[$cnt]"
            set NxtInd = $cnt
			endif
      endif
      
      if ("$argv[$cnt]" == "-roi") then
         set SufLoc = $cnt		
		   if ($SufLoc == $Narg) then
				echo "Need option after -roi"
            goto END
			else
				@ cnt ++
            set fn_msk = "$argv[$cnt]"
            set NxtInd = $cnt
			endif
      endif
      
		
		@ cnt ++
	end

@ NxtInd ++
set others_list = ( $argv[$NxtInd-$#argv] )

#echo "$ss"
#echo "$sslab"
#echo "$other_list"

goto RETURN_PARSE

END:
