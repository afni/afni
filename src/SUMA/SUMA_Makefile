#

#These normally come from AFNI's makefile, if you're running make without using afni's makefile, you need to set some variables
ifndef CEXTRA
CEXTRA = -Wcomment -Wformat -DUSE_TRACING -fomit-frame-pointer -DHAVE_XDBE
WARNOPT = -Wall -Wno-unused-variable
endif

ifndef RANLIB
RANLIB = /usr/bin/ranlib
endif

ifeq ($(CC),gcc)
#if (on safni) CC starts with gcc then it means makefile is executed from afni's makefile
#can't use ndef with CC because it's always defined
else
#add the option -DSUMA_MOTIF_GLXAREA if you want to use libMesaGLwM.a instead of libMesaGLw.a
CC = gcc -O2 -march=i586 -ffast-math -DLINUX2 -DNO_GAMMA $(CEXTRA)
endif

ifndef INSTALLDIR
INSTALLDIR_SUMA = /home/ziad/abin
else
#send suma to one directory back and let Makefile.INCLUDE move it to INSTALLDIR
INSTALLDIR_SUMA = ../
endif 

CCOPT = 

SUMALIB = libSUMA.a
AFNILIB = -lmrix -lcoxplot -lf2c -lmri -lrickr
MAINCODE = SUMA

ifndef SUMA_INCLUDE_PATH
SUMA_INCLUDE_PATH = -I/usr/X11R6/include -I./ -I../
endif
ifndef SUMA_LINK_PATH
SUMA_LINK_PATH = -L/usr/lib -L/usr/X11R6/lib -L../
endif
ifndef SUMA_LINK_LIB
#No need for those unless you are using SUMA_MOTIF_GLXAREA
#-lMesaGLwM lXm 
SUMA_LINK_LIB = -lGLw -lGLU -lGL -lXmu -lXm -lXp -lXt -lXext -lX11 -lm 
endif

ifndef SUMA_BIN_ARCHIVE
SUMA_BIN_ARCHIVE = SUMA_Local.tar
endif

ifndef CP
CP = cp
endif

ifndef MV
MV = /bin/mv
endif

ifndef TAR
TAR = /bin/tar
endif

ifndef RM
RM = /bin/rm -f
endif

ifndef MKDIR
MKDIR = /bin/mkdir
endif

#that one was tried for static linking. Bad idea. Requires libGL.a which crashes with nvidia driver 
#for static linking to work (forget about running the program) you need to build Mesa with the 
#options --enable-static --without-glide with the ./configure script
# ./configure --prefix=/usr --enable-static --without-glide
#CCOPT = -static
#SUMA_LINK_LIB = -lGLU -lGL -lpthread -lXmu -lXm -lXp -lXext -lXt -lSM -lICE -lX11 -lm 

#CUT HERE ---> COPY SECTION BELOW FOR SUMA_Makefile_NoDev
 
SUMA_SRCS = SUMA_trackball.c SUMA_SVmanip.c SUMA_input.c SUMA_MiscFunc.c SUMA_IV_XYZextract.c	\
		 SUMA_IV_FaceSetsextract.c  SUMA_SurfNorm.c SUMA_DOmanip.c SUMA_StripPath.c 	\
		 SUMA_Load_Surface_Object.c SUMA_CreateDO.c SUMA_help.c SUMA_display.c SUMA_ParseCommands.c	\
		 SUMA_Engine.c SUMA_Surface_IO.c SUMA_VolData.c SUMA_niml.c SUMA_Color.c	\
		 SUMA_GeomComp.c SUMA_SphericalMapping.c SUMA_Algorithms.c SUMA_DataSets.c	\
		 SUMA_Homer.c
 
SUMA_SRCS_MAIN = SUMA_suma.c

SUMA_OBJS = ${SUMA_SRCS:.c=.o}
AFNI_OBJS = ../xutil.o ../LiteClue.o 
AFNI_3dOBJS = ../parser.o ../parser_int.o
SUMA_SRCS_OBJS = ${SUMA_SRCS_MAIN:.c=.o}

SUMA_HDRS = SUMA_Color.h SUMA_DOmanip.h SUMA_input.h SUMA_MiscFunc.h SUMA_suma.h SUMA_trackball.h	\
		 SUMA_define.h SUMA_gen_include.h SUMA_Macros.h SUMA_prototype.h SUMA_SVmanip.h SUMA_SphericalMapping.h  \
		 SUMA_DataSets.h SUMA_Homer.h

#library only
${SUMALIB} : libply.a ${SUMA_OBJS}
	rm -f ${SUMALIB}
	ar q ${SUMALIB} ${SUMA_OBJS}
	echo "library Rebuilt ..."
	$(RANLIB) ${SUMALIB} 

#Main objects, You don't want main functions in libSUMA.a 
mainobj: ${SUMALIB} ${SUMA_SRCS_OBJS}

clean:
	$(RM) *.o

.c.o:
	${CC} ${CCOPT} ${WARNOPT} ${SUMA_INCLUDE_PATH} -c $*.c 

SUMA_glxdino:
	$(RM) $@
	${CC} ${CCOPT} ${WARNOPT} -o $@ SUMA_glxdino.c ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_pixmap2eps:
	$(RM) $@
	${CC} ${CCOPT} ${WARNOPT} -o $@ SUMA_pixmap2eps.c ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

suma: SUMA_suma.o 
	$(RM) $@
	${CC} ${CCOPT} ${WARNOPT} -o suma ${AFNI_OBJS} SUMA_suma.o ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

MakeColorMap: SUMA_Color.c
	$(RM) $@
	${CC} -DSUMA_MakeColorMap_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Color.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

ScaleToMap: SUMA_Color.c
	$(RM) $@
	${CC} -DSUMA_ScaleToMap_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Color.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_FreeSurfer: SUMA_Surface_IO.c
	$(RM) $@
	${CC} -DSUMA_FreeSurfer_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Surface_IO.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_Read_SpecFile: SUMA_Load_Surface_Object.c
	$(RM) $@
	${CC} -DSUMA_Read_SpecFile_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Load_Surface_Object.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_Load_Surface_Object: SUMA_Load_Surface_Object.c
	$(RM) $@
	${CC} -DSUMA_Load_Surface_Object_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Load_Surface_Object.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_SureFit: SUMA_Surface_IO.c
	$(RM) $@
	${CC} -DSUMA_SureFit_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Surface_IO.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_compare_surfaces: SUMA_compare_surfaces.c
	$(RM) $@
	${CC} -DSUMA_compare_surfaces_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_compare_surfaces.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_inflate_compare: SUMA_inflate_compare.c
	$(RM) $@
	${CC} -DSUMA_inflate_compare_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_inflate_compare.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_CreateIcosahedron: SUMA_SphericalMapping.c
	$(RM) $@
	${CC} -DSUMA_CreateIcosahedron_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_SphericalMapping.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_Map_SurfacetoSurface: SUMA_SphericalMapping.c
	$(RM) $@
	${CC} -DSUMA_Map_SurfacetoSurface_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_SphericalMapping.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_MapIcosahedron: SUMA_SphericalMapping.c
	$(RM) $@
	${CC} -DSUMA_MapIcosahedron_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_SphericalMapping.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_SurfNorm: SUMA_SurfNorm.c
	$(RM) $@
	${CC} -DSUMA_SurfNorm_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_SurfNorm.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_Ply_Read: SUMA_Surface_IO.c
	$(RM) $@
	${CC} -DSUMA_Ply_Read_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Surface_IO.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_ParseName: SUMA_StripPath.c
	$(RM) $@
	${CC} -DSUMA_ParseName_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_StripPath.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}
 
ConvertSurface: SUMA_Surface_IO.c
	$(RM) $@
	${CC} -DSUMA_ConvertSurface_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Surface_IO.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SurfaceMetrics: SUMA_Load_Surface_Object.c
	$(RM) $@
	${CC} -DSUMA_SurfaceMetrics_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Load_Surface_Object.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_TestDataSets: SUMA_DataSets.c
	$(RM) $@
	${CC} -DSUMA_TEST_DATA_SETS_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_DataSets.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

ROI2dataset: SUMA_Surface_IO.c
	$(RM) $@
	${CC} -DSUMA_ROI2dataset_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Surface_IO.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

SUMA_Homer: SUMA_Homer.c
	$(RM) $@
	${CC} -DSUMA_Homer_STAND_ALONE ${CCOPT} ${WARNOPT} -o $@ ${AFNI_OBJS} SUMA_Homer.c ${SUMALIB} libply.a ${AFNILIB} ${ZLIB} ${SUMA_INCLUDE_PATH} ${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

3dSurfMaskDump: SUMA_3dSurfMaskDump.c 
	$(RM) $@
	${CC} ${CCOPT} ${WARNOPT} -o $@ SUMA_3dSurfMaskDump.c ${SUMA_INCLUDE_PATH}		\
		${AFNI_3dOBJS} ${AFNI_OBJS} -lf2c			\
		${SUMALIB} libply.a ${AFNILIB} ${ZLIB}			\
		${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

3dSurf2Vol: SUMA_3dSurf2Vol.c 
	$(RM) $@
	${CC} ${CCOPT} ${WARNOPT} -o $@ SUMA_3dSurf2Vol.c ${SUMA_INCLUDE_PATH}\
		${AFNI_3dOBJS} ${AFNI_OBJS} -lf2c			\
		${SUMALIB} libply.a ${AFNILIB} ${ZLIB}			\
		${SUMA_LINK_PATH} ${SUMA_LINK_LIB}

libply.a: 
	( cd PLY ;	\
	  make clean $@ 'CC=$(CC)' 'RM=$(RM)' 'RANLIB=$(RANLIB)' 'CCOPT=$(CCOPT)' 'WARNOPT=$(WARNOPT)' ; \
	  $(CP) -p $@ .. ; )

install:
	@echo Installing Binaries...
	@if [ ! -d $(INSTALLDIR_SUMA) ]; then $(MKDIR) -p $(INSTALLDIR_SUMA); echo WARNING: directory $(INSTALLDIR_SUMA) has been created from SUMA directory. ; fi
	@if [ -f suma ]; then mv suma ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_CreateIcosahedron ]; then mv SUMA_CreateIcosahedron ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_Map_SurfacetoSurface ]; then mv SUMA_Map_SurfacetoSurface ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_MapIcosahedron ]; then mv SUMA_MapIcosahedron ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_SureFit ]; then mv SUMA_SureFit ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_Load_Surface_Object ]; then mv SUMA_Load_Surface_Object ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_Read_SpecFile ]; then mv SUMA_Read_SpecFile ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_FreeSurfer ]; then mv SUMA_FreeSurfer ${INSTALLDIR_SUMA}; fi;
	@if [ -f ScaleToMap ]; then mv ScaleToMap ${INSTALLDIR_SUMA}; fi;
	@if [ -f MakeColorMap ]; then mv MakeColorMap ${INSTALLDIR_SUMA}; fi;
	@if [ -f ROI2dataset ]; then mv ROI2dataset ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_compare_surfaces ]; then mv SUMA_compare_surfaces ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_inflate_compare ]; then mv SUMA_inflate_compare ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_Ply_Read ]; then mv SUMA_Ply_Read ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_ParseName ]; then mv SUMA_ParseName ${INSTALLDIR_SUMA}; fi;
	@if [ -f 3dSurfMaskDump ]; then mv 3dSurfMaskDump ${INSTALLDIR_SUMA}; fi;
	@if [ -f 3dSurf2Vol ]; then mv 3dSurf2Vol ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_glxdino ]; then mv SUMA_glxdino ${INSTALLDIR_SUMA}; fi;
	@if [ -f SUMA_pixmap2eps ]; then mv SUMA_pixmap2eps ${INSTALLDIR_SUMA}; fi;

packbins:
	if [ ! -d SUMA_bin	]; then $(MKDIR) SUMA_bin; fi
	chmod u+x ./@SUMA_CreateCompileStamp
	./@SUMA_CreateCompileStamp SUMA_bin/@SUMA_CompileStamp
	$(CP) -p suma MakeColorMap libSUMA.a ScaleToMap 3dSurfMaskDump  \
		 3dSurf2Vol SUMA_bin/
	$(TAR) -cf $(SUMA_BIN_ARCHIVE) SUMA_bin
	${RM} -r SUMA_bin
	
all: libSUMA.a mainobj suma install 

standalones: SUMA_CreateIcosahedron SUMA_Map_SurfacetoSurface SUMA_MapIcosahedron SUMA_SureFit \
SUMA_Load_Surface_Object SUMA_Read_SpecFile SUMA_FreeSurfer ScaleToMap MakeColorMap \
SUMA_compare_surfaces SUMA_inflate_compare SUMA_Ply_Read SUMA_ParseName ConvertSurface \
3dSurfMaskDump 3dSurf2Vol SurfaceMetrics SUMA_TestDataSets ROI2dataset


 
anew: clean libSUMA.a mainobj suma standalones packbins install 

testGL: SUMA_glxdino SUMA_pixmap2eps
