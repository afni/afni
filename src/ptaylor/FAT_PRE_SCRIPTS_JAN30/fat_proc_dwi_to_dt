#!/bin/tcsh -ef

# --------------------- revision history -------------------------
# Jan, 2017
#   + rename
#
# Jan 27, 2017
#   + update opts
#
# ----------------------------------------------------------------

set version   = "1.2"
set rev_dat   = "Jan 27, 2017"
set this_prog = "fat_proc_dwi_to_dt"

set idwi     = ""
set invecmat = ( "" "" "" "" )    # switches+names for bvecs and bvals
set iflip    = ""                 # can flip (yaaawn)

set odir     = ""
set opref    = ""
set ori_new  = "RPI"              # default file output orientation
set out_mata = "BMTXT_AFNI.txt"   # TORTOISE default name
set out_cvec = "BGRAD_AFNI.txt"   # NAME FOR FULL AFNI GRADS

set cmd_file    = ""               # def: same name as viewer
#set postfix     = "axlz"           # stick into name


# ------------------- process options, a la rr ----------------------

if ( $#argv == 0 ) goto SHOW_HELP

set ac = 1
while ( $ac <= $#argv )
    # terminal options
    if ( ("$argv[$ac]" == "-h" ) || ("$argv[$ac]" == "-help" )) then
        goto SHOW_HELP
    endif
    if ( "$argv[$ac]" == "-ver" ) then
        goto SHOW_VERSION
    endif

    # --------------- input dset(s) ----------------
    if ( "$argv[$ac]" == "-indwi" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set idwi = "$argv[$ac]"
        
    # ------------- input vecmat and bval --------------
    else if ( "$argv[$ac]" == "-in_col_matA" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[1]  = "$argv[$ac]" # reuse in 1dDW*++
        @ ac += 1
        set invecmat[2] = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-in_col_matT" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[1]  = "$argv[$ac]" # reuse in 1dDW*++
        @ ac += 1
        set invecmat[2] = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-in_col_vec" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[1]  = "$argv[$ac]" # reuse in 1dDW*++
        @ ac += 1
        set invecmat[2] = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-in_row_vec" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[1]  = "$argv[$ac]" # reuse in 1dDW*++
        @ ac += 1
        set invecmat[2] = "$argv[$ac]"

    # not necessary; default is just empty
    else if ( "$argv[$ac]" == "-in_bvals" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[3]  = "$argv[$ac]" # reuse in 1dDW*++
        @ ac += 1
        set invecmat[4] = "$argv[$ac]"

    # ----------------- outputs ---------------------
    else if ( "$argv[$ac]" == "-outdir" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set odir = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-prefix" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set opref = "$argv[$ac]"

    # ----------------- other opts ---------------------
    else if ( "$argv[$ac]" == "-orient" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set ori_new = "$argv[$ac]"

    else if ( ("$argv[$ac]" == "-flip_x") || \
              ("$argv[$ac]" == "-flip_y") || \
              ("$argv[$ac]" == "-flip_z") || \
              ("$argv[$ac]" == "-no_flip") ) then
        set iflip = "$argv[$ac]"


    # other stuff.....
    # !!!!! structural, for orientation??

    else
        echo "** unexpected option #$ac = '$argv[$ac]'"
        goto BAD_EXIT

    endif
    @ ac += 1
end

# =======================================================================
# ============================ ** SETUP ** ==============================
# =======================================================================

# ============================ input files ==============================

echo "++ Start script version: $version"

set check = `3dinfo "$idwi"`
if ( "$#check" == "0" ) then
    echo "** ERROR: can't find inset file $idwi !"
    goto BAD_EXIT
else
    echo "++ Found inset file $idwi !"
endif

# check for vec/mat file
if ( -f $invecmat[2] ) then
    echo "++ Found entered vec/mat file $invecmat[2] !"
else
    echo "** ERROR: can't find entered vec/mat file $invecmat[2] !"
    goto BAD_EXIT
endif

# check for bval file, if entered
if ( -f $invecmat[4] ) then
    echo "++ Found entered bval file $invecmat[4] !"
else
    echo "** ERROR: can't find entered bval file $invecmat[4] !"
    goto BAD_EXIT
endif

# ========================= output dir ==========================

# check output directory, use input one if nothing given

if ( $odir == "" ) then
    # default output dir, if nothing input; it must exist already,
    # because a file is in it

    set odir = `dirname $idwi`
    echo "\n++ No output directory specificied by the user."
    echo "++ Using the input DWI file's directory by default:"
    echo "\t$odir"
else
    if ( ! -e $odir ) then
        echo "++ Making new output directory: $odir"
        mkdir $odir
    endif
endif

# =======================================================================
# =========================== ** PROCESS ** =============================
# =======================================================================

echo "\n-----> STARTING ---->"

echo "\n\nThis command:"
echo "$this_prog $argv\n\n"

if ( $cmd_file == "" ) then
    set cmd_file = "$odir/${outpref}_${postfix}_cmd.txt"
endif


# make BMTXT_AFNI.txt
if ( 1 ) then

    if( ! -f $odir/$out_mata ) then
        1dDW_Grad_o_Mat++                        \
            -echo_edu                            \
            $iflip                               \
            $invecmat                            \
            -out_col_matA  $odir/$out_mata       \
            -overwrite
    endif
 
    1dDW_Grad_o_Mat++                        \
        -echo_edu                            \
        $iflip                               \
        $invecmat                            \
        -out_col_matA  $odir/$out_cvec       \
        -overwrite

endif











goto GOOD_EXIT

# ========================================================================
# ========================================================================

SHOW_HELP:
cat << EOF
-------------------------------------------------------------------------



-------------------------------------------------------------------------

EOF

    goto GOOD_EXIT

SHOW_VERSION:
    echo "version  $version (${rev_dat})"
    goto GOOD_EXIT

BAD_EXIT:
    exit 1

# send everyone here, in case there is any cleanup to do
GOOD_EXIT:
    exit 0
