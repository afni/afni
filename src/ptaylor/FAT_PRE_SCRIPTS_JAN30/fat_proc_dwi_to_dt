#!/bin/tcsh -ef


# --------------------- revision history -------------------------
# Jan, 2017
#   + rename
#
# Jan 27, 2017
#   + update opts
#
#set version   = "1.3"
#set rev_dat   = "Feb, 2017"
#   + drive viewer
#
#set version   = "1.4"
#set rev_dat   = "Feb 20, 2017"
#   + supplementary anat input
#
#set version   = "1.5"
#set rev_dat   = "Feb 26, 2017"
#   + more with anat input
#   + wdir
#   + pre-alignment/matching stuff
#
set version   = "1.6";    set rev_dat   = "Feb 27, 2017"
#   + pre-alignment/matching stuff
#
# ----------------------------------------------------------------

set this_prog = "fat_proc_dwi_to_dt"
set here      = $PWD

# ----------------- find AFNI and set viewer ---------------------

# find AFNI binaries directory and viewer location
set adir      = ""
set my_viewer = ""
which afni >& /dev/null
if ( $status ) then
    echo "** Cannot find 'afni' (??!?!)."
    goto BAD_EXIT
else
    set aa   = `which afni`
    set adir = $aa:h
endif

# default location of viewer: user could modify!
set my_viewer = "$adir/@chauffeur_afni"

# ----------------------- set defaults --------------------------


set idwi     = ""                 # necessary input: DWI dset
set invecmat = ( "" "" "" "" )    # switches+names for bvecs and bvals
set imask    = ""                 # optional mask; otherwise, automask
set ianat    = ""                 # optional struc vol (like in TORT)
set iref     = ""                 # option, for getting orient + orig

set iflip    = ""                 # for 1dDW_*++: can flip (yaaawn)
set sca      = "-scale_out_1000"  # for 3dDWItoDT: -scale_out_1000

set odir     = ""
set opref    = "dwi"
set dtipref  = "dt"               # NIFTI prefix for NII output
set postfix  = "parfit"
set ori_new  = "RPI"              # default file output orientation

set DO_VIEWER   = 1               # def: do viewing
set qc_prefix   = ""              # def: autoname; user can enter
set qc_fa_thr   = 0.2             # def: FA olay thr for QC
set qc_fa_max   = 0.9             # def: FA olay max for QC
set output_cmd  = 1               # def: output copy of this command
                                  # -> should expand to have all cmds
set cmd_file    = ""              # def: same name as viewer
set postfix     = "dti"           # stick into name

set DO_UNCERT   = 1
set Niters      = 300
set extra_unc_cmds = ""

set DO_CLEAN = 1
set wdir     = "__WORKING_dwitodt"

# ------------------- process options, a la rr ----------------------

if ( $#argv == 0 ) goto SHOW_HELP

set ac = 1
while ( $ac <= $#argv )
    # terminal options
    if ( ("$argv[$ac]" == "-h" ) || ("$argv[$ac]" == "-help" )) then
        goto SHOW_HELP
    endif
    if ( "$argv[$ac]" == "-ver" ) then
        goto SHOW_VERSION
    endif

    # --------------- input dset(s) ----------------
    if ( "$argv[$ac]" == "-in_dwi" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set idwi = "$argv[$ac]"
        
    else if ( "$argv[$ac]" == "-in_mask" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set imask = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-in_anat_res" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set ianat = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-in_ref_orig" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set iref = "$argv[$ac]"

    # ------------- input vecmat and bval --------------
    else if ( "$argv[$ac]" == "-in_col_matA" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[1]  = $argv[$ac] 
        @ ac += 1
        set invecmat[2]  = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-in_col_matT" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[1]  = $argv[$ac] 
        @ ac += 1
        set invecmat[2]  = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-in_col_vec" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[1]  = $argv[$ac] 
        @ ac += 1
        set invecmat[2]  = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-in_row_vec" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[1]  = $argv[$ac] 
        @ ac += 1
        set invecmat[2]  = "$argv[$ac]"

    # not necessary; default is just empty
    else if ( "$argv[$ac]" == "-in_bvals" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        set invecmat[3]  = $argv[$ac] 
        @ ac += 1
        set invecmat[4]  = "$argv[$ac]"

    # ----------------- outputs ---------------------
    else if ( "$argv[$ac]" == "-outdir" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set odir = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-prefix_dwi" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set opref = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-prefix_dti" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set dtipref = "$argv[$ac]"

    # ----------------- other opts ---------------------
    else if ( ("$argv[$ac]" == "-flip_x") || \
              ("$argv[$ac]" == "-flip_y") || \
              ("$argv[$ac]" == "-flip_z") || \
              ("$argv[$ac]" == "-no_flip") ) then
        set iflip = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-no_scale_out_1000" ) then
        set sca = ""

    else if ( "$argv[$ac]" == "-qc_fa_thr" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set qc_fa_thr = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-qc_fa_max" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set qc_fa_max = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-qc_prefix" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set qc_prefix = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-no_qc_view" ) then
        set DO_VIEWER = 0

    else if ( "$argv[$ac]" == "-no_cmd_out" ) then
        set output_cmd = 0

    # ------ dti par uncert --------------
    else if ( "$argv[$ac]" == "-uncert_off" ) then
        set DO_UNCERT = 0

    else if ( "$argv[$ac]" == "-uncert_iters" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set Niters = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-uncert_extra_cmds" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set extra_unc_cmds = "$argv[$ac]"

    else
        echo "** unexpected option #$ac = '$argv[$ac]'"
        goto BAD_EXIT

    endif
    @ ac += 1
end

# =======================================================================
# ============================ ** SETUP ** ==============================
# =======================================================================

# ============================ input files ==============================

echo "++ Start script version: $version"

# NEED these two inputs
if ( "$idwi" == "" ) then
    echo "** ERROR: no DWI file input??!"
    goto BAD_EXIT
else if ( "$invecmat[2]" == "" ) then
    echo "** ERROR: no gradient/matrix file input??!"
    goto BAD_EXIT
endif

# make sure we can read DWI OK
set check = `3dinfo "$idwi"`
if ( "$#check" == "0" ) then
    echo "** ERROR: can't find inset file:  $idwi !"
    goto BAD_EXIT
else
    echo "++ Found inset DWI file:   $idwi"
endif

# check for vec/mat file ???????????????/
if ( 0 ) then
if ( -f "$invecmat[2]" ) then
    echo "++ Found input vec/mat file:  $invecmat[2]"
else
    echo "** ERROR: can't find entered vec/mat file $invecmat[2] !"
    goto BAD_EXIT
endif
endif

# check if MASK was input, then if can be read
if ( "$imask" != "" ) then
    set check = `3dinfo "$imask"`
    if ( "$#check" == "0" ) then
        echo "** ERROR: can't find input mask file:  $imask !"
        goto BAD_EXIT
    else
        echo "++ Found inset input file:   $imask"
    endif
endif

# check if ANAT was input, then if can be read
if ( "$ianat" != "" ) then
    set check = `3dinfo "$ianat"`
    if ( "$#check" == "0" ) then
        echo "** ERROR: can't find input anatomical file:  $ianat !"
        goto BAD_EXIT
    else
        echo "++ Found inset input file:   $ianat"
    endif
endif

# check if REF was input, then if can be read
if ( "$iref" != "" ) then
    set check = `3dinfo "$iref"`
    if ( "$#check" == "0" ) then
        echo "** ERROR: can't find input ref file:  $iref !"
        goto BAD_EXIT
    else
        echo "++ Found input ref file:   $iref"
        set ori_new = `3dinfo -orient "$iref"`
    endif
endif

# check for bval file, if entered
if ( 0 ) then
if ( "$invecmat[4]" != "" ) then
    if ( -f "$invecmat[4]" ) then
        echo "++ Found entered bval file:   $invecmat[4]"
    else
        echo "** ERROR: can't find entered bval file:  $invecmat[4] !"
        goto BAD_EXIT
    endif
endif
endif

# ========================= output dir ==========================
 
# check output directory, use input one if nothing given

if ( "$odir" == "" ) then
    # default output dir, if nothing input; it must exist already,
    # because a file is in it

    set odir = `dirname "$idwi"`
    echo "\n++ No output directory specificied by the user."
    echo "++ Using the input DWI file's directory by default:"
    echo "\t$odir"
else
    if ( ! -e $odir ) then
        echo "++ Making new output directory: $odir"
        mkdir $odir
    endif
endif

set wdir = "$odir/$wdir"

# make the working directory
if ( ! -e $wdir ) then
    echo "++ Making working directory: $wdir"
    mkdir $wdir
else
    echo "+* WARNING: Somehow found a premade working directory (?):"
    echo "      $wdir"
endif

# ========================= output fnames ==========================

set ocmd   = "${opref}_cmd.txt"      # name for output command
set omata  = "${opref}_bmatA.txt"    # name for full afni bmatrix
set obvec  = "${opref}_bvec.txt"     # name for full afni grads
set obval  = "${opref}_bval.txt"     # name for full afni bvals
set odwi   = "${opref}_dwi.nii.gz"   # name for dwis
set omask  = "${opref}_mask.nii.gz"  # name for mask
set oanat  = "${opref}_anat.nii.gz"  # name for anat in output

#set dti    = "DTI"
set dti_par = "${dtipref}.nii.gz"    # NIFTI prefix for NII output
set dti_unc = "${dtipref}_UNC.nii.gz" # name for mask

# =======================================================================
# =========================== ** PROCESS ** =============================
# =======================================================================

echo "\n-----> STARTING $this_prog ---->"

# ---------------------------- CMD ---------------------------------

echo "\n\nThis command:"
echo "$this_prog $argv\n\n"

if ( "$cmd_file" == "" ) then
    set cmd_file = "$odir/$ocmd"
endif

# copy original command:
# dump copy of command into workdir/..
if ( $output_cmd == 1 ) then
    echo "++ Echoing the command to: $cmd_file"

    echo "### Executed from the directory location:"  > $cmd_file
    echo "# $here\n"            >> $cmd_file
    echo "### The command was:" >> $cmd_file
    echo "# $this_prog $argv"   >> $cmd_file
    echo "\n"                   >> $cmd_file
endif

# ----------------- grads/bmats ---------------------
# Make grad file: bmatrix, bvector and bvalues

# make grads ...
1dDW_Grad_o_Mat++                     \
    -overwrite                        \
    -echo_edu                         \
    $iflip                            \
    -out_col_vec      $odir/$obvec    \
    -out_col_bval_sep $odir/$obval    \
    "$invecmat[1]" "$invecmat[2]"     \
    "$invecmat[3]" "$invecmat[4]" 

# ... and matching matA
1dDW_Grad_o_Mat++                     \
    -echo_edu                         \
    -in_col_vec       $odir/$obvec    \
    -out_col_matA     $odir/$omata    \
    -overwrite

# -------------- copy DWI/reset ori^2 --------------

if ( "$iref" != "" ) then

    # make sure this is in same orientation with ref
    set ori_idwi = `3dinfo -orient "$idwi"`
    if ( "$ori_idwi" != "$ori_new" ) then
        echo "++ Resampling/fitting input DWI vols."
        set tmp_idwi = $wdir/DWI_res.nii
        3dresample               \
            -echo_edu            \
            -overwrite           \
            -inset  "$idwi"      \
            -orient "$ori_new"   \
            -prefix $tmp_idwi
    else
        # ... or just use input file as is
        set tmp_idwi = "$idwi"
    endif

    if ( "$ianat" != "" ) then
        # resample anat, if nec; then use it to find shift to get to
        # refspace
        set ori_anat = `3dinfo -orient "$ianat"`
        if ( "$ori_anat" != "$ori_new" ) then
            echo "++ Resampling/fitting input anat vol."
            set tmp_ianat = $wdir/anat_res.nii
            3dresample               \
                -echo_edu            \
                -overwrite           \
                -inset  "$ianat"     \
                -orient "$ori_new"   \
                -prefix $tmp_ianat
        else
            # ... or just use input file as is
            set tmp_ianat = "$ianat"
        endif

        set isetinref  = $wdir/anat_in_ref.nii
        set map_to_ref = $wdir/map_to_ref.param.1D
        3dAllineate                      \
            -lpa                         \
            -source_automask             \
            -autoweight                  \
            -cmass                       \
            -final wsinc5                \
            -1Dparam_save $map_to_ref    \
            -warp shift_only             \
            -source $tmp_ianat           \
            -base "$iref"                \
            -prefix $isetinref           \
            -overwrite
    else
        # use dwi[0] for it.
        set isetinref  = $wdir/dwi0_in_ref.nii
        set map_to_ref = $wdir/map_to_ref.param.1D
        3dAllineate                      \
            -lpa                         \
            -source_automask             \
            -autoweight                  \
            -cmass                       \
            -final wsinc5                \
            -1Dparam_save $map_to_ref    \
            -warp shift_only             \
            -source $tmp_idwi"[0]"       \
            -base "$iref"                \
            -prefix $isetinref           \
            -overwrite
    endif

    if ( $DO_VIEWER ) then

        echo "++ Initial QC images: how did we align to ref?"

        if( $qc_prefix == "" ) then
            set vpref0 = ${opref}_${postfix}_qc00_refalign
        else
            set vpref0 = ${qc_prefix}_${postfix}_qc00_refalign
        endif

        echo "\n\n"
        echo "++ QC image 00 ($isetinref on $iref): $vpref0"
        echo "\n\n"
        # need to put '[0]' on $iref?
        $my_viewer                            \
            -ulay "$iref"                     \
            -ulay_range "2%" "98%"            \
            -olay "$isetinref"                \
            -pbar_posonly                     \
            -opacity 4                        \
            -prefix $vpref0                   \
            -outdir "$odir"                   \
            -montx 5 -monty 3                 \
            -set_xhairs OFF                   \
            -label_mode 1 -label_size 3       \
            -do_clean 

    endif

    # --> from either of the above maps, we just care about the
    # --> $map_to_ref, to apply those shifts to the DWI set, so it
    # --> isn't resampled/smoothed.
    
    # les shifts; need to reverse signs to apply
    set shsh = `grep -v -h "#" $map_to_ref`
    set sss  = ( 0 0 0 )
    foreach i ( `seq 1 1 3` ) 
        set sss[$i]  = `echo "scale=2; -1.0 * $shsh[$i]" | bc`
    end

    # copy dwi, and apply shifts with refit
    3dcalc                   \
        -echo_edu            \
        -overwrite           \
        -a  "$tmp_idwi"      \
        -expr 'a'            \
        -prefix $odir/$odwi

    # apply to both DWI and, if applicable, the anat
    3drefit                  \
        -dxorigin "$sss[1]"  \
        -dyorigin "$sss[2]"  \
        -dzorigin "$sss[3]"  \
        $odir/$odwi

    if ( "$ianat" != "" ) then
        3dcalc                   \
            -echo_edu            \
            -overwrite           \
            -a  "$tmp_ianat"     \
            -expr 'a'            \
            -prefix $odir/$oanat
        3drefit                  \
            -dxorigin "$sss[1]"  \
            -dyorigin "$sss[2]"  \
            -dzorigin "$sss[3]"  \
            $odir/$oanat
    endif

else
    # just copy
    3dcalc                   \
        -echo_edu            \
        -overwrite           \
        -a  "$idwi"          \
        -expr 'a'            \
        -prefix $odir/$odwi

    3dcalc                   \
        -echo_edu            \
        -overwrite           \
        -a  "$ianat"         \
        -expr 'a'            \
        -prefix $odir/$oanat
endif

# ----------------- WB mask: make or copy -------------

if ( "$imask" == "" ) then
    # make
    echo "++ Automasking to make:  $odir/$omask"
    3dAutomask                \
        -echo_edu             \
        -overwrite            \
        -prefix $odir/$omask  \
        $odir/$odwi'[0]'
else
    # just copy
    3dcalc                    \
        -echo_edu             \
        -overwrite            \
        -a  $imask            \
        -expr 'a'             \
        -prefix $odir/$omask
endif

# ------------------- tensor fit -----------------

echo "++ Fitting tensor and estimating params to make:  $odir/${dti_par}*"
3dDWItoDT                              \
    -echo_edu                          \
    -overwrite                         \
    -eigs -nonlinear -sep_dsets        \
    $sca                               \
    -prefix       $odir/$dti_par       \
    -mask         $odir/$omask         \
    -bmatrix_FULL $odir/$omata         \
                  $odir/$odwi

echo "++ Tensor par. uncertainty with $Niters iterations:  $odir/${dti_unc}*"

if ( $DO_UNCERT ) then
    3dDWUncert                             \
        -echo_edu                          \
        -overwrite                         \
        -inset         $odir/$odwi         \
        -input         $odir/$dtipref      \
        -bmatrix_FULL  $odir/$omata        \
        -mask          $odir/$omask        \
        -prefix        $odir/$dti_unc      \
        -iters         $Niters             \
        $extra_unc_cmds
endif

# ---------------------------- VIEWER ---------------------------------

if ( $DO_VIEWER ) then

    echo "++ Making QC images."

    if( $qc_prefix == "" ) then
        set vpref0 = ${opref}_${postfix}_qc01_fin
        set vpref1 = ${opref}_${postfix}_qc02_FAMD
    else
        set vpref0 = ${qc_prefix}_${postfix}_qc01_fin
        set vpref1 = ${qc_prefix}_${postfix}_qc02_FAMD
    endif

    if( "$iref" != "" ) then

        echo "\n\n"
        echo "++ QC image 01 ($odir/${odwi}[0] on $iref): $vpref0"
        echo "\n\n"
        # need to put '[0]' on $iref?
        $my_viewer                            \
            -ulay "$iref"                     \
            -ulay_range "2%" "98%"            \
            -olay "$odir/${odwi}""[0]"        \
            -pbar_posonly                     \
            -opacity 4                        \
            -prefix $vpref0                   \
            -outdir "$odir"                   \
            -montx 5 -monty 3                 \
            -set_xhairs OFF                   \
            -label_mode 1 -label_size 3       \
            -do_clean 
    endif

        echo "\n\n"
        echo "++ QC image 02 (final output FA>thr on MD): $vpref1"
        echo "   (olay colorbar is 'Plasma', with max value ${qc_fa_max})"
        echo "\n\n"

        $my_viewer                              \
            -ulay "$odir/${dtipref}_MD.nii.gz"  \
            -ulay_range "2%" "98%"              \
            -olay "$odir/${dtipref}_FA.nii.gz"  \
            -func_range $qc_fa_max              \
            -thr_olay $qc_fa_thr                \
            -pbar_posonly                       \
            -opacity 7                          \
            -prefix $vpref1                     \
            -outdir "$odir"                     \
            -montx 5 -monty 3                   \
            -set_xhairs OFF                     \
            -label_mode 1 -label_size 3         \
            -do_clean    

    if ( 0 ) then
    echo "\n\n++ QC image 01 (earlier allin olaying ref ulay): $vpref2\n\n"
    $my_viewer      -ulay $rout                     \
                    -olay $qc2o                     \
                    -prefix $vpref2                 \
                    -outdir ".."                    \
                    -montx 3 -monty 3               \
                    -set_xhairs OFF                 \
                    -label_mode 1 -label_size 3     \
                    -opacity 4                      \
                    -do_clean
    endif

endif

# ---------------------------------------------------------------------

goto GOOD_EXIT

# ========================================================================
# ========================================================================

SHOW_HELP:
cat << EOF
-------------------------------------------------------------------------

 This program is for doing tensor and DT parameter fitting, as well as
 the uncertainty of DT parameters that are needed for tractography.

  Ver. $version (PA Taylor, ${rev_dat})

-------------------------------------------------------------------------

  RUNNING:

  This script has two *required* arguments ('-in_dwi ...' and some
  kind of gradient/matrix file input.  

  The rest are optional, but it is highly recommended to input a
  reference data set ('-in_ref ...')  if you have used a processing
  tool that resets origin+orientation (such as TORTOISE), as well as
  using '-scale_out_1000' to make the output units of the physical DT
  measures nicer.

  $this_prog  \
   -in_dwi       DWI                              \
   {-in_col_matA | -in_col_matT |                 \
    -in_col_vec | -in_row_vec} GRADMAT            \
   {-in_bvals     BVAL}                           \
   {-in_mask      MASK}                           \
   {-in_anat_res  ANAT}                           \
   {-in_ref_orig  REF}                            \
   {-outdir       ODIR}                           \
   {-prefix_dwi   PREFIX1}                        \
   {-prefix_dti   PREFIX2}                        \
   {-flip_x | -flip_y | -flip_z | -no_flip}       \
   {-no_scale_out_1000}                           \
   {-qc_prefix    QCPREF}                         \
   {-qc_fa_thr    TTT}                            \
   {-qc_fa_max    MMM}                            \
   {-no_qc_view}                                  \
   {-no_cmd_out}                                  \
   {-uncert_off}                                  \
   {-uncert_iters NN}                             \
   {-uncert_extra_cmds STR}

  where
    -in_dwi     DWI  :4D volume of N DWIs.

    -in_col_matA | -in_col_matT | -in_col_vec | -in_row_vec  GRADMAT
                     :input text file of N gradient vectors or 
                      bmatrices. By default, it is assumed that
                      these still have physical units in them (or that
                      there is an accompanying BVAL file input), so
                      scaling physical values by 1000 is on by default;
                      see turning this scaling off, if unnecessary, by 
                      using '-no_scale_out_1000', below.
   -in_bvals    BVAL :optional, if bvalue information is
                      in a separate file from the b-vectors
                      or matrices; should have same number N as
                      volumes and vectors/matrices.
   -flip_x | -flip_y | -flip_z | -no_flip
                     :can flip the DW grads, if needed; for example, 
                      based on the recommendation of @GradFlipTest.

   -in_mask     MASK :optional whole brain mask can be input;
                      otherwise, automasking is performed for the 
                      region to be tensor and parameter fit.

   -in_ref_orig REF  :use another data set to adjust the DWI (and
                      subsequent parameter) dsets' orientation and
                      origin; for example, TORTOISE has default 
                      orientation and origin for all output DWIs-- it
                      would be very advisable to use the anatomical
                      volume that you had input into TORTOISE as REF,
                      so that the DWIs should be viewable overlaying
                      it afterwards; if an ANAT (below) that has been 
                      merely resampled is *not* used, then you really, 
                      really want REF to have the same contrast as the
                      b=0 DWI volume.
   -in_anat_res ANAT :accomplish the alignment of the output DWI to the 
                      REF data set via ANAT: a version of the anatomical 
                      that has been resampled to match the DWI set (in 
                      both orientation and origin);  for example, in
                      TORTOISE there is a 'structure.nii' file that should
                      match this description.  Both ANAT and DWI should 
                      then be well aligned to the original REF (and to  
                      each other).
         
   -outdir      ODIR :can specify output directory for all created 
                      dsets (default is 'current' directory).
 -prefix_dwi PREFIX1 :set prefix for output DWI data; default is '${opref}'.
 -prefix_dti PREFIX2 :set prefix for output DTI data; default is '${dtipref}'.

  -no_scale_out_1000 :by default, for tensor fitting it is assumed
                      that 1) the DW b-value information is included
                      in the gradient vectors or grads, and 2) you are
                      happy to have tiny numbers of physical
                      diffusion, which in standard units are like
                      MD~0.001 "mm^2/s", scaled by 1000 so that they
                      are returned as MD~1 "10^{-3} mm^2/s".  Isn't
                      that nicer?  I thought you'd agree-- therefore,
                      such a kind of scaling is *on* by default.  To
                      turn that *off*, use this option flag.
                      See the 3dDWItoDT help file for what this
                      entails.  Basically, you will likely have nicer
                      numeric values (from scaling physical length
                      units by 1000); otherwise, you might have small
                      numerical values leading to issues with
                      statistical modeling.

   -qc_fa_thr TTT    :set threshold for overlay FA volume in QC image
                      (default:  TTT=0.2, as for healthy adult human 
                      parenchyma).
   -qc_fa_max MMM    :set cbar max for overlay FA volume in QC image
                      (default:  MMM=0.9, a very large value even for 
                      healthy adult human parenchyma).
   -qc_prefix QCPREF :can set the prefix of the QC image files separately
                      (default is '$opref').
   -no_qc_view       :can turn off generating QC image files (why??)
   -no_cmd_out       :don't save the command line call of this program
                      and the location where it was run (otherwise, it is
                      saved by default in the ODIR/).

   -uncert_off       :don't do uncertainty calc (default is to do so); 
                      perhaps if it is slow or you want *very* different
                      options.
   -uncert_iters NN  :set the number of Monte Carlo iterations for the
                      uncertainty calc (default NN=300).
-uncert_extra_cmds STR:put in extra commands for the uncertainty calcs
                      (see the 3dDWUncert helpfile for more opts).

# -----------------------------------------------------------------------

  EXAMPLE

    $this_prog \
        -in_dwi       DWI.nii                \
        -in_col_matA  BMTXT_AFNI.txt         \
        -outdir       DTI                    \
        -in_anat_res  ../structure.nii       \
        -in_ref_orig  t2w.nii

-------------------------------------------------------------------------

EOF

    goto GOOD_EXIT

SHOW_VERSION:
    echo "version  $version (${rev_dat})"
    goto GOOD_EXIT

BAD_EXIT:
    exit 1

# send everyone here, in case there is any cleanup to do
GOOD_EXIT:
    exit 0
