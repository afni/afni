#!/bin/tcsh -e

# written by PA Taylor (NIMH, NIH, USA)
# started March, 2017

# --------------------- revision history -------------------------
#
set version   = "1.0";    set rev_dat   = "March 29, 2017"
#   + inception
#
# ---------------------------------------------------------------

set this_prog = "fat_proc_select_vols"
set here      = $PWD

# ----------------- find AFNI and set viewer ---------------------

# find AFNI binaries directory and viewer location
set adir      = ""
set my_viewer = ""
which afni >& /dev/null
if ( $status ) then
    echo "** Cannot find 'afni' (?!)."
    goto BAD_EXIT
else
    set aa   = `which afni`
    set adir = $aa:h
endif

# default location of viewer: user could modify!
set my_viewer   = "$adir/@chauffeur_afni"
set my_selector = "$adir/@djunct_dwi_selector.bash"
set my_encoder  = "$adir/@djunct_select_str.py"

# ----------------------- set defaults --------------------------

set idwi       = ""              # required input
set iimg       = ""              # required input
set obads      = ""              # NOT required input

set odir       = ""
set opref      = "subs"
set DO_OUTVOL  = 0               # don't apply to DWI by default

set DO_VIEWER  = 1               # def: do viewing
set DO_CLEAN   = 1
set output_cmd = 1               # def: output copy of this command
set cmd_file   = ""              # def: same name as viewer
set qc_prefix  = ""              # def: autoname; user can enter
set postfix    = "dti"           # stick into name

# ------------------- process options, a la rr ----------------------

if ( $#argv == 0 ) goto SHOW_HELP

set ac = 1
while ( $ac <= $#argv )
    # terminal options
    if ( ("$argv[$ac]" == "-h" ) || ("$argv[$ac]" == "-help" )) then
        goto SHOW_HELP
    endif
    if ( "$argv[$ac]" == "-ver" ) then
        goto SHOW_VERSION
    endif

    # --------------- input dset(s) ----------------
    # input dwi set
    if ( "$argv[$ac]" == "-in_dwi" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set idwi = "$argv[$ac]"

    # input dwi set
    else if ( "$argv[$ac]" == "-in_img" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set iimg = "$argv[$ac]"

    # can edit a pre-existing text file
    else if ( "$argv[$ac]" == "-in_bads" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set obads = "$argv[$ac]"

    # ----------------- outputs ---------------------

    else if ( "$argv[$ac]" == "-outdir" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set odir = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-prefix" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set opref = "$argv[$ac]"

    # ------------------- other opts ---------------

    # ? make a flag to chop the input DWI if necessary?

    else if ( "$argv[$ac]" == "-no_cmd_out" ) then
        set output_cmd = 0

    # --------------- apply to DWI and image ---------

    else if ( "$argv[$ac]" == "-apply_to_dwi" ) then
        set DO_OUTVOL = 1

    else if ( "$argv[$ac]" == "-do_movie" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set movie = "$argv[$ac]"
        if ( ( $movie == "MPEG" ) || ( $movie == "AGIF" ) ) then
            echo "++ OK, will make a movie of type $movie."
        else
            echo "** ERROR: '$movie' is NOT an allowed movie format!"
            echo "      -> must be either 'MPEG' or 'AGIF'"
            goto BAD_EXIT
        endif
        # replace with both here for calling @dj*
        set movie = "-do_movie $movie"   

    else
        echo "** unexpected option #$ac = '$argv[$ac]'"
        goto BAD_EXIT

    endif
    @ ac += 1
end

# =======================================================================
# ============================ ** SETUP ** ==============================
# =======================================================================

# ============================ input files ==============================

echo "++ Start script version: $version"

# NEED this input
if ( "$idwi" == "" ) then
    echo "** ERROR: no t1w file input?!"
    goto BAD_EXIT
endif

# make sure we can read volumes OK
foreach ff ( "$idwi" )
    set check = `3dinfo "$ff"`
    if ( "$#check" == "0" ) then
        echo "** ERROR: can't find input file:  $ff !"
        goto BAD_EXIT
    else
        echo "++ Found input file:   $ff"
    endif
end

# ========================= output dir ==========================
 
# check output directory, use input one if nothing given

if ( "$odir" == "" ) then
    # default output dir, if nothing input; it must exist already,
    # because a file is in it

    set odir = `dirname "$idwi"`
    echo "\n++ No output directory specified by the user."
    echo "++ Using the input T1w file's directory by default:"
    echo "\t$odir"
else
    if ( ! -e $odir ) then
        echo "++ Making new output directory: $odir"
        mkdir $odir
    endif
endif

# ========================= output fnames ==========================

set ocmd   = "${opref}_cmd.txt"      # name for output command
set ogoods = "${opref}_goods.txt"    # name 
set ovol   = "${opref}.nii"    # name 

## !!!!!!
if ( "$obads" == "" ) then

    set obads  = "${opref}_bads.txt"

    if ( -e "$odir/$obads" ) then
        echo ""
        echo "** ERROR! File for listing 'bads' exists already: $odir/$obads"
        echo "   ---> If you want to add to a list you started previously,"
        echo "        you must use the '-in_bads ...' option."
        echo "        (Sorry, but hopefully this prevents mistakenly"
        echo "        appending to preexisting lists.)\n"
        goto BAD_EXIT
    endif
else
    if ( -e "$odir/$obads" ) then
        echo ""
        echo "+* WARNING! Just so you know the file: $odir/$obads"
        echo "   exists already!  I assume you know that you will append to"
        echo "   it, and that you want to do so (because I assume all users"
        echo "   read help files as much as *I* do!)"
        echo "   Ooook, carrying on, then.\n"
    endif
endif

# =======================================================================
# =========================== ** PROCESS ** =============================
# =======================================================================

echo "\n-----> STARTING $this_prog ---->"

# ---------------------------- CMD ---------------------------------

echo "\n\nThis command:"
echo "$this_prog $argv\n\n"

if ( "$cmd_file" == "" ) then
    set cmd_file = "$odir/$ocmd"
endif

# copy original command:
# dump copy of command into workdir/..
if ( $output_cmd == 1 ) then
    echo "++ Echoing the command to: $cmd_file"

    echo "### Executed from the directory location:"  > $cmd_file
    echo "# $here\n"            >> $cmd_file
    echo "### The command was:" >> $cmd_file
    echo "# $this_prog $argv"   >> $cmd_file
    echo "\n"                   >> $cmd_file
endif

# --------------------- start proc ---------------------------

echo "++ Call selector:"
echo "   $my_selector $idwi $iimg $obads\n"

$my_selector "$idwi" "$iimg" "$obads"

set Nvols = `3dinfo -nv "$idwi"`

$my_encoder  "$obads" $Nvols "$ogoods"


if ( $DO_OUTVOL ) then

    set selstr = `cat PPP_goods.txt`
    3dcalc                    \
        -overwrite            \
        -a "$idwi""[$selstr]" \
        -expr 'a'             \
        -prefix $odir/$ovol

    if ( 1 ) then

        set img_pref = `basename $ovol     .gz`
        set img_pref = `basename $img_pref .nii`

        @djunct_dwi_imager                    \
            -inset  $odir/$ovol               \
            -outdir "$odir"                   \
            -prefix "$odir/$img_pref"         \
            $movie

    endif

endif


# ---------------------------------------------------------------------
goto GOOD_EXIT

# ========================================================================
# ========================================================================

SHOW_HELP:
cat << EOF
# -----------------------------------------------------------------------

 This program is for building a selector string for AFNI subbricks
 and/or 1D text files.  It makes use of J. Rajendra's
 ``@djunct_dwi_selector.sh`` script to make a list of 'bad' volume
 indices by clicking on individual volumes in a montage image.  Pretty
 cool.

 In the end, a selector string of volumes *to keep* (i.e., the
 complement of the set of indices chosen with clicks) is output to
 screen as well as stored in a text file.

  Ver. $version (PA Taylor, ${rev_dat})

# ----------------------------------------------------------------------

  OUTPUT:

    + PPP_bads.txt: text file with AFNI-usable selector string, which
                    can be put into either square brackets [] or curly
                    brackets {}, whichever is appropriate for a given
                    application.

# ----------------------------------------------------------------------

  RUNNING:

    $this_prog  \
        {-in_dwi  DDD}                 \
        {-in_img  IM2D}                \
        {-in_bads TTT}                 \
        {-outdir  ODIR}                \
        {-prefix  PPP}                 \
        {-apply_to_dwi}                \
        {-do_movie AGIF|MPEG}          \
        {-no_cmd_out} 

  where:

   -in_dwi  DDD   :input DWI set (required).
   -in_img  IM2D  :2d image of DDD, such as made by a fat_proc* 
                   script, or @djunct_*imager directly (required).
   -in_bads TTT   :(optional) a single column file of integers,
                   such as made by a previous run of $this_prog.
                   For example, if one has dual phase-encoded
                   DWI data, then one might make a list of bads
                   from the AP-acquired set and then add to it any
                   bad indices from the PA-acquired set.

   -outdir  ODIR  :can specify output directory for all created 
                   dsets (default is DWI volume's directory).                
   -prefix  PPP   :output prefix for files.  

   -apply_to_dwi  :switch to apply the created selection of good 
                   volumes to the DWI dset.  NB: if you are using 
                   this function to select out bad volumes from 
                   a dual phase encode set, then you *wouldn't* want 
                   to use this option, because you want to apply
                   the complete removal to *both* volumes.  Note also,
                   that once you apply this selection to the volumes,
                   you also need to apply it to any bval, bvec, bmatrix,
                   etc. text files.
    -do_movie AGIF | MPEG:
                   when "-apply_to_dwi" is used, static images are 
                   output by default;  one can use this option with 
                   either of the given arguments to output a movie of the
                   newly created dset.  Only those arguments can be used
                   at present.

   -no_cmd_out    :don't save the command line call of this program
                   and the location where it was run (otherwise, it is
                   saved by default in the ODIR/).                     

# ----------------------------------------------------------------------

  EXAMPLE

    $this_prog    \
        -in_dwi DWI.nii               \
        -in_img DWI_sepscl.sag.png    \
        -outdir .                     \
        -prefix DWI_trim


    $this_prog    \
        -in_dwi DWI_ap.nii               \
        -in_img DWI_ap_sepscl.sag.png    \
        -outdir .                        \
        -prefix DWI_trim_both            \
        -in_bads DWI_appa_bads.txt

# -----------------------------------------------------------------------

EOF

    goto GOOD_EXIT

SHOW_VERSION:
    echo "version  $version (${rev_dat})"
    goto GOOD_EXIT

BAD_EXIT:
    exit 1

# send everyone here, in case there is any cleanup to do
GOOD_EXIT:
    exit 0
