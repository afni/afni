#!/bin/tcsh -ef

# written by PA Taylor (NIMH, NIH, USA)
# started March, 2017

# --------------------- revision history -------------------------
#
#set version   = "1.0";    set rev_dat   = "March 16, 2017"
#   + inception
#
set version   = "1.1";    set rev_dat   = "March 19, 2017"
#   + follower NN list
#
# ---------------------------------------------------------------

set this_prog = "fat_proc_align_anat_pair"
set here      = $PWD

# ----------------- find AFNI and set viewer ---------------------

# find AFNI binaries directory and viewer location
set adir      = ""
set my_viewer = ""
which afni >& /dev/null
if ( $status ) then
    echo "** Cannot find 'afni' (??!?!)."
    goto BAD_EXIT
else
    set aa   = `which afni`
    set adir = $aa:h
endif

# default location of viewer: user could modify!
set my_viewer = "$adir/@chauffeur_afni"

# ----------------------- set defaults --------------------------

set it1w       = ""
set it2w       = ""

set odir       = ""
set opref      = "indti"

set fNN        = ()              # followers to be interpolated with NN
set fWS5       = ()              # followers to be interpolated with wsinc5

set DO_VIEWER  = 1               # def: do viewing
set DO_CLEAN   = 1
set wdir       = "__WORKING_maptodti"
set output_cmd = 1               # def: output copy of this command
set cmd_file   = ""              # def: same name as viewer
set qc_prefix  = ""              # def: autoname; user can enter
set postfix    = "dti"           # stick into name

# ------------------- process options, a la rr ----------------------

if ( $#argv == 0 ) goto SHOW_HELP

set ac = 1
while ( $ac <= $#argv )
    # terminal options
    if ( ("$argv[$ac]" == "-h" ) || ("$argv[$ac]" == "-help" )) then
        goto SHOW_HELP
    endif
    if ( "$argv[$ac]" == "-ver" ) then
        goto SHOW_VERSION
    endif

    # --------------- input dset(s) ----------------

    # input volume 'source', likely to have opposite contrast to the
    # b0/T2w to which we are matching.
    if ( "$argv[$ac]" == "-in_t1w" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set it1w = "$argv[$ac]"

    # our name for the b0 file still
    else if ( "$argv[$ac]" == "-in_t2w" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set it2w = "$argv[$ac]"

    # ----------------- outputs ---------------------

    else if ( "$argv[$ac]" == "-outdir" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set odir = "$argv[$ac]"

    else if ( "$argv[$ac]" == "-prefix" ) then
        if ( $ac >= $#argv ) goto FAIL_MISSING_ARG
        @ ac += 1
        set opref = "$argv[$ac]"

    # ------------------- other opts ---------------

    else if ( "$argv[$ac]" == "-no_cmd_out" ) then
        set output_cmd = 0

    else if ( "$argv[$ac]" == "-no_clean" ) then
        set DO_CLEAN = 0

    # -------------- get followers --------------------
    # can be arbitrary list (a bit clunky method...)
    
    else if ( "$argv[$ac]" == "-followers_NN" ) then
        set i0 = $ac
        # check that this ain't the end of argv[] entries
        if ( $i0 == $#argv ) then
            echo "** ERROR: need at least one dset after $argv[$ac]!"
            goto BAD_EXIT
        else 
            # check that next argv[] member isn't a new option: shd be
            # a dset
            @ i0 += 1
            set c0 = ""
            while ( ( $i0 <= $#argv ) && ( "$c0" != "-" )  )
                set fNN = ( $fNN "$argv[$i0]" )
                @ ac += 1

                @ i0 += 1
                if ( $i0 <= $#argv ) then
                    set c0 = `echo $argv[$i0] | awk '{print substr($0,1,1)}'`
                endif
            end

            if ( $#fNN == 0 ) then
                echo "** ERROR: need at least one dset after $argv[$ac]!"
                goto BAD_EXIT
            else
                echo "++ User has listed $#fNN follower_NN dsets"
            endif
        endif

    else if ( "$argv[$ac]" == "-followers_wsinc5" ) then
        set i0 = $ac
        # check that this ain't the end of argv[] entries
        if ( $i0 == $#argv ) then
            echo "** ERROR: need at least one dset after $argv[$ac]!"
            goto BAD_EXIT
        else 
            # check that next argv[] member isn't a new option: shd be
            # a dset
            @ i0 += 1
            set c0 = ""
            while ( ( $i0 <= $#argv ) && ( "$c0" != "-" )  )
                set fWS5 = ( $fWS5 "$argv[$i0]" )
                @ ac += 1

                @ i0 += 1
                if ( $i0 <= $#argv ) then
                    set c0 = `echo $argv[$i0] | awk '{print substr($0,1,1)}'`
                endif
            end

            if ( $#fWS5 == 0 ) then
                echo "** ERROR: need at least one dset after $argv[$ac]!"
                goto BAD_EXIT
            else
                echo "++ User has listed $#fWS5 follower_ws5 dsets"
            endif
        endif

    else
        echo "** unexpected option #$ac = '$argv[$ac]'"
        goto BAD_EXIT

    endif
    @ ac += 1
end



# =======================================================================
# ============================ ** SETUP ** ==============================
# =======================================================================

# ============================ input files ==============================

echo "++ Start script version: $version"

# NEED these two inputs
if ( "$it1w" == "" ) then
    echo "** ERROR: no t1w file input??!"
    goto BAD_EXIT
else if ( "$it2w" == "" ) then
    echo "** ERROR: no t2w file input??!"
    goto BAD_EXIT
endif

# make sure we can read volumes OK
foreach ff ( "$it1w" "$it2w" $fNN $fWS5 )
    set check = `3dinfo "$ff"`
    if ( "$#check" == "0" ) then
        echo "** ERROR: can't find input file:  $ff !"
        goto BAD_EXIT
    else
        echo "++ Found input file:   $ff"
    endif
end

# ========================= output dir ==========================
 
# check output directory, use input one if nothing given

if ( "$odir" == "" ) then
    # default output dir, if nothing input; it must exist already,
    # because a file is in it

    set odir = `dirname "$it1w"`
    echo "\n++ No output directory specified by the user."
    echo "++ Using the input T1w file's directory by default:"
    echo "\t$odir"
else
    if ( ! -e $odir ) then
        echo "++ Making new output directory: $odir"
        mkdir $odir
    endif
endif

set wdir = "$odir/$wdir"

# make the working directory
if ( ! -e $wdir ) then
    echo "++ Making working directory: $wdir"
    mkdir $wdir
else
    echo "+* WARNING: Somehow found a premade working directory (?):"
    echo "      $wdir"
endif

# ========================= output fnames ==========================

set ocmd   = "${opref}_cmd.txt"      # name for output command
set ot1w   = "${opref}.nii.gz"       # name for output t1w

# =======================================================================
# =========================== ** PROCESS ** =============================
# =======================================================================

echo "\n-----> STARTING $this_prog ---->"

# ---------------------------- CMD ---------------------------------

echo "\n\nThis command:"
echo "$this_prog $argv\n\n"

if ( "$cmd_file" == "" ) then
    set cmd_file = "$odir/$ocmd"
endif

# copy original command:
# dump copy of command into workdir/..
if ( $output_cmd == 1 ) then
    echo "++ Echoing the command to: $cmd_file"

    echo "### Executed from the directory location:"  > $cmd_file
    echo "# $here\n"            >> $cmd_file
    echo "### The command was:" >> $cmd_file
    echo "# $this_prog $argv"   >> $cmd_file
    echo "\n"                   >> $cmd_file
endif

# --------------------- start proc ---------------------------

# copy the t1w file to wdir via resampling: match t2w-t1w orients
set orient_t2w = `3dinfo -orient "$it2w"`
set t1res      = $wdir/f00_t1res.nii
set T1TOMAP    = $t1res                 # we will apply map to this!
3dresample                          \
    -overwrite                      \
    -prefix $t1res                  \
    -orient $orient_t2w             \
    -inset "$it1w"

# prep this side for aligning with a bit of unifizing and brightness
# thresholding
echo "++ Unifize T1w proc vol."
set t1uni = $wdir/f01_t1uni.nii
3dUnifize                            \
    -GM                              \
    -prefix  $t1uni                  \
    -input   "$t1res"                \
    -overwrite 

echo "++ Threshold T1w proc vol."
set t1thr = $wdir/f02_t1thr.nii
set v1 = `3dBrickStat -non-zero -automask   \
            -percentile 95 1 95 ${t1uni}`
echo ${v1[2]}
3dcalc -a  ${t1uni}                         \
       -expr "maxbelow(${v1[2]},a)"         \
       -prefix $t1thr                       \
       -overwrite

set t1align   = $wdir/f05_t1align.nii
set mapt1alnd = $wdir/map_shrot.aff12.1D

3dAllineate   -echo_edu               \
    -1Dmatrix_save  $mapt1alnd        \
    -prefix         "$t1align"        \
    -base           "$it2w"           \
    -twopass                          \
    -cost lpc                         \
    -cmass                            \
    -source_automask                  \
    -autoweight                       \
    -source "$t1thr"                  \
    -final wsinc5                     \
    -overwrite

echo "++ Calc'ed alignment.  Now to apply it."

# --> always match dti grid...
set t1mapped = $wdir/f06_t1mapped.nii
if ( 1 ) then
    echo "++ Outputting final image to t2w space"
    3dAllineate   -echo_edu               \
        -overwrite                        \
        -1Dmatrix_apply   $mapt1alnd      \
        -source           $T1TOMAP        \
        -master           "$it2w"         \
        -prefix           $t1mapped       \
        -float                            \
        -final wsinc5
endif

# map all NN followers
set list_ofNN = ()
foreach i ( `seq 1 1 $#fNN` ) 

    set ffi = "$fNN[$i]"
    set ppi = `3dinfo -prefix_noext $ffi`
    set ffr = "$wdir/fff_${ppi}.nii"
    set off = "$odir/${opref}_${ppi}.nii.gz"

    3dresample                          \
        -overwrite                      \
        -prefix $ffr                    \
        -orient $orient_t2w             \
        -inset $ffi

    3dAllineate   -echo_edu               \
        -overwrite                        \
        -1Dmatrix_apply   $mapt1alnd      \
        -source           $ffr            \
        -master           "$it2w"         \
        -prefix           $off            \
        -final NN

    set list_ofNN = ( $list_ofNN $off )
end

# map all WS5 followers
set list_ofWS5 = ()
foreach i ( `seq 1 1 $#fWS5` ) 

    set ffi = "$fWS5[$i]"
    set ppi = `3dinfo -prefix_noext $ffi`
    set ffr = "$wdir/fff_${ppi}.nii"
    set off = "$odir/${opref}_${ppi}.nii.gz"

    3dresample                          \
        -overwrite                      \
        -prefix $ffr                    \
        -orient $orient_t2w             \
        -inset $ffi

    3dAllineate   -echo_edu               \
        -overwrite                        \
        -1Dmatrix_apply   $mapt1alnd      \
        -source           $ffr            \
        -master           "$it2w"         \
        -prefix           $off            \
        -final wsinc5

    set list_ofWS5 = ( $list_ofWS5 $off )
end

set T1TOCOPY = $t1mapped
set fdims = `3dinfo -n4 ${T1TOCOPY}`
set fres  = `3dinfo -ad3 ${T1TOCOPY}`

echo "++ Done workin'.  Just need to copy the final dset."

3dcopy $T1TOCOPY $odir/$ot1w

if ( $DO_VIEWER == 1 ) then

    set vedge = $wdir/f10_edges.nii

    echo "++ More QC images: b0 on initial ref."
    3dedge3                         \
        -overwrite                  \
        -prefix $vedge              \
        -input  $odir/$ot1w

    if( $qc_prefix == "" ) then
        set vpref0 = ${opref}_${postfix}_qc00_t1wEt2w
        set vpref1 = ${opref}_${postfix}_qc01_t1won2w
    else
        set vpref0 = ${qc_prefix}_${postfix}_qc00_t1wEt2w 
        set vpref1 = ${qc_prefix}_${postfix}_qc01_t1won2w
    endif

    echo "\n\n"
    echo "++ QC image 00 ($odir/$ot1w edges on $it2w): $vpref0"
    echo "\n\n"
    # need to put '[0]' on $iref?
    $my_viewer                            \
        -ulay "$it2w"                     \
        -ulay_range "2%" "98%"            \
        -olay "$vedge"                    \
        -func_range_perc 50               \
        -pbar_posonly                     \
        -cbar "red_monochrome"            \
        -opacity 6                        \
        -prefix $vpref0                   \
        -outdir "$odir"                   \
        -montx 5 -monty 3                 \
        -set_xhairs OFF                   \
        -label_mode 1 -label_size 3       \
        -do_clean 

    echo "\n\n"
    echo "++ QC image 01 ($odir/$ot1w olay on $it2w): $vpref1"
    echo "\n\n"

    $my_viewer                            \
        -ulay "$it2w"                     \
        -ulay_range "2%" "98%"            \
        -olay "$odir/$ot1w"               \
        -pbar_posonly                     \
        -opacity 4                        \
        -prefix $vpref1                   \
        -outdir "$odir"                   \
        -montx 5 -monty 3                 \
        -set_xhairs OFF                   \
        -label_mode 1 -label_size 3       \
        -do_clean 

    # for NN
    foreach ff ( ${list_ofNN} )
        echo "++ QC imaging for the follower dset list:"
        echo "    ${list_ofNN}"

        set pp = `3dinfo -prefix_noext $ff`
        if( $qc_prefix == "" ) then
            set vprefnn = ${opref}_${postfix}_qc_$pp
        else
            set vprefnn = ${qc_prefix}_${postfix}_qc_$pp
        endif

        $my_viewer                            \
            -ulay "$it2w"                     \
            -ulay_range "2%" "98%"            \
            -olay "$ff"                       \
            -pbar_posonly                     \
            -cbar "ROI_i256"                  \
            -opacity 4                        \
            -prefix $vprefnn                  \
            -outdir "$odir"                   \
            -montx 5 -monty 3                 \
            -set_xhairs OFF                   \
            -label_mode 1 -label_size 3       \
            -do_clean 
    end

    # for WS5
    foreach ff ( ${list_ofWS5} )
        echo "++ QC imaging for the follower dset list:"
        echo "    ${list_ofWS5}"

        set pp = `3dinfo -prefix_noext $ff`
        if( $qc_prefix == "" ) then
            set vprefnn = ${opref}_${postfix}_qc_$pp
        else
            set vprefnn = ${qc_prefix}_${postfix}_qc_$pp
        endif

        $my_viewer                            \
            -ulay "$it2w"                     \
            -ulay_range "2%" "98%"            \
            -olay "$ff"                       \
            -pbar_posonly                     \
            -cbar "Viridis"                   \
            -opacity 4                        \
            -prefix $vprefnn                  \
            -outdir "$odir"                   \
            -montx 5 -monty 3                 \
            -set_xhairs OFF                   \
            -label_mode 1 -label_size 3       \
            -do_clean 
    end

endif

# clean, by default
if ( $DO_CLEAN ) then
    echo "\n++ Cleaning working directory!\n"
    \rm -rf $wdir
else
    echo "\n++ NOT removing working directory '$wdir'.\n"
endif

# final messages
echo "++ The final data set is here:  $odir/$ot1w"
echo "++ The final spatial dims are:  $fdims[1] $fdims[2] $fdims[3]"
echo "++ The spatial resolution is:   $fres[1] $fres[2] $fres[3]"

# ---------------------------------------------------------------------

goto GOOD_EXIT

# ========================================================================
# ========================================================================

SHOW_HELP:
cat << EOF
# -----------------------------------------------------------------------

 This program is for aligning a T1w anatomical to a T2w anatomical
 using solid body parameters (i.e., only translation and rotation);
 this program does not clean or alter the T1w's brightness values
 (beyond minor smoothing from regridding).  If one is going to be
 entering the T1w volume into the realms of FreeSurfer (FS), one might
 want to do this just *before* that step.  If one wants axialized (or
 AC-PC-ized) anatomical volumes, one could perform that step on the
 T2w volume *before* using this function.

 This program mainly assumes that the T1w and T2w volume come from the
 same subject, and have similar contrasts expected for standard
 sequences and healthy adult brains.  This might still work for other
 applications, but caveat emptor (even more than usual!).  This would
 *not* be recommended for aligning brains that aren't from the same
 subject.

 As part of this alignment, the T1w volume will end up with the same
 orientation and a similar FOV as the T2w volume.  Additionally, by
 default, the anatomical will be prepped a bit with an eye toward
 using FS, to have properties favorable to using it: 

   + the T1w volume is resampled to isotropic spatial resolution of
     either 1 mm voxel edges or, if the input volume has any edge
     length smaller than this, to that value (i.e., resampled to 1 mm
     or the minimum input voxel edge length, whichever is less).  The
     user can adjust this with the '-newgrid ...' option, or decide to 
     match the grid of the T2w volume via '-out_t2w_grid'. 

   + the T1w will have a FOV matching or quite similar to the T2w
     volume (as well as matching orientation).

   + the output T1w will be checked to ensure having an even number of
     rows along each axis; this is because FS somehow seems to want
     this for best behavioring. A slice of zeros will be appended in
     any direction with with an odd number of slices; turned off
     by using '-no_fs_prep'.

 Note that, if you are preparing to use FS afterwards, then make sure
 to use their current help files, archives, etc. for all options and
 settings.  For example, while at present (March, 2017) FS does seem
 to prefer isotropic voxels with 1 mm edge length by default, one can
 use high resolution options for data acquired at higher resolution.
 Anyways, you can read more about that there.

  Ver. $version (PA Taylor, ${rev_dat})

# ----------------------------------------------------------------------

  OUTPUT:

     + NIFTI file: aligned T1w volume

     + QC snapshots of the T1w volume overlaying the T2w volume, and
       also the T1w edges overlaying the T2w volume.

# ----------------------------------------------------------------------

  RUNNING:

    $this_prog \
      {-in_t1w  T1W}                        \
      {-in_t2w  T2W}                        \
      {-outdir  ODIR}                       \
      {-prefix  PPP}                        \
      {-no_cmd_out}                         \
      {-no_clean} 

  where:

   -in_t1w  T1W   :T1w volume (required).
   -in_t2w  T2W   :T2w volume (required; preferably from same subject as
                   T1W).
   -outdir  ODIR  :can specify output directory for all created 
                   dsets (default is T1W volume's directory).                
   -prefix  PPP   :output prefix for files and snapshots.                     

   -no_cmd_out    :don't save the command line call of this program
                   and the location where it was run (otherwise, it is
                   saved by default in the ODIR/).                     
   -no_clean      :no not delete temporary working directory (default is to 
                   remove it to save disk space).

# ----------------------------------------------------------------------

  EXAMPLE

    $this_prog  \
        -in_t1w    MPRAGE.nii.gz        \
        -outdir    SUB001               \
        -prefix    t1w_alnd



# -----------------------------------------------------------------------

EOF

    goto GOOD_EXIT

SHOW_VERSION:
    echo "version  $version (${rev_dat})"
    goto GOOD_EXIT

BAD_EXIT:
    exit 1

# send everyone here, in case there is any cleanup to do
GOOD_EXIT:
    exit 0
