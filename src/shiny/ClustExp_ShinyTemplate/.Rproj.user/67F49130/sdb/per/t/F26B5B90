{
    "collab_server" : "",
    "contents" : "#####################################\n## 09/2017 Justin Rajendra\n## \"library\" of helper functions for R\n\n## necessary libraries\nlibrary(afex)\nlibrary(plotly)\n\n#####################################\n## return all permutations of all lengths of a vector pasted together\n## takes a vector and a string to paste (\"_\",\"*\",etc.)\ncombn_paste_fun <- function(vector.in,collapse.in){\n  if(length(vector.in) > 1){\n    vector.out <- vector.in\n    for(i in 2:length(vector.in)){\n      temp <- t(combn(vector.in,i))\n      vector.out <- c(vector.out,apply(temp,1,paste,collapse=collapse.in))\n    }\n  } else { vector.out <- vector.in }   ## only one so return that\n  return(vector.out)\n}\n\n#####################################\n## return model string\n## takes left hand side, main model (bsVars),\n## within subject model, and the Error variable as strings\n## if no wsVars, pass an NULL\nModelMaker <- function(lhs.in,bsVars.in,wsVars.in,err.str){\n  if(!is.null(wsVars.in)){\n    model.out <- paste0(lhs.in,\" ~ \",bsVars.in,\" + Error(Subj/\", wsVars.in,\")\")\n  } else {\n    model.out <- paste0(lhs.in,\" ~ \",bsVars.in,\" + Error(Subj)\")\n  }\n  return(model.out)\n}   ## end model maker\n\n#####################################\n## return list of a fit object, R and p from standard lm\n## takes a data frame and the x,y variables as characters\nlmCalc <- function(data.in,x.in,y.in){\n\n  ## make model and do the fit\n  mod.in <- as.formula(paste(y.in,\"~\",x.in))\n  fit <- lm(mod.in,data.in)\n\n  ## get the R and p\n  rValue <- sqrt(summary(fit)$r.squared)\n  if(sign(fit$coefficients[2]) != 1) { rValue <- rValue * -1 }\n  pValue <- pf(summary(fit)$fstatistic[1],summary(fit)$fstatistic[2],\n               summary(fit)$fstatistic[3],lower.tail=FALSE)\n  fit.out <- list(fit=fit,R=rValue,p=pValue)\n  return(fit.out)\n}\n\n#####################################\n## return vector of categorical within subject variable names\n## takes a data frame and the column index for \"subj\"\nwsVarCatFinder <- function(data.in,subj.col){\n\n  ## check inputs\n  if(!is.data.frame(data.in)){\n    print(\"Input is not a data frame.\")\n    return(NA)\n  }\n  if(!is.numeric(subj.col)){\n    print(paste(subj.col,\"is not numeric.\"))\n    return(NA)\n  }\n\n  ## see how many per subject and give error is all not the same\n  subj.freq <- data.frame(table(data.in[[subj.col]]))$Freq\n  if(!all(subj.freq[1] == subj.freq)) {\n    print(\"Missing subject levels.\")\n    return(NA)\n  }\n\n  ## get the categorical\n  catVars <- c(names(data.in)[sapply(data.in,is.factor)])\n  if(length(catVars) == 0){\n    print(\"No categorical variables.\")\n    return(NA)\n  }\n\n  ## empty data frame with the catVars\n  subj.reps <- data.frame(matrix(ncol=length(catVars),nrow=0))\n  colnames(subj.reps) <- catVars\n\n  ## for each subj\n  for(s in levels(data.in[[subj.col]])){\n\n    ## subset and get rid of empty factor levels\n    subj.temp <- subset(data.in,data.in[[subj.col]] == s,select=catVars)\n    subj.temp <- as.data.frame(lapply(subj.temp,function(x)\n      if(is.factor(x)) factor(x) else x))\n\n    ## get the number of levels per variable and add to output\n    rep.temp <- as.data.frame(lapply(subj.temp,function(x) length(levels(x))))\n    subj.reps <- rbind(subj.reps,rep.temp)\n  }\n\n  ## are there any wsVars?\n  if(any(subj.reps > 1)){\n    wsVars <- c()\n    ## if any subject has more than one level for the variable, it is a wsVar\n    for(i in 1:length(subj.reps)){\n      if(max(subj.reps[[i]]) > 1){\n        wsVars <- c(wsVars,names(subj.reps[i]))\n      }\n    }\n    return(wsVars)\n  } else {\n    print(\"No categorical within subject variables.\")\n    return(NA)\n  }\n}   ## end wsVarCatFinder\n\n#####################################\n## standard error with no extra library\nstd.err.mean <- function(x){ sd(x,na.rm=TRUE)/sqrt(sum(!is.na(x))) }\n\n#####################################\n## return empty plotly with some message as the title\nplotly_error <- function(message.in){\n  plot_ly(x=1,y=1,alpha=0) %>%\n    layout(title=message.in,font=list(color='red'),margin=list(t=80),\n           yaxis=list(visible=FALSE),xaxis=list(visible=FALSE))\n}\n\n\n",
    "created" : 1505922299106.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "901822478",
    "id" : "F26B5B90",
    "lastKnownWriteTime" : 1505930667,
    "last_content_update" : 1505930667781,
    "path" : "~/research/ClusterExplorer/ClustExp_ShinyTemplate/lib_Rafni.R",
    "project_path" : "lib_Rafni.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}