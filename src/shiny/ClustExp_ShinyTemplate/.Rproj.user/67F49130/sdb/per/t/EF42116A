{
    "collab_server" : "",
    "contents" : "#####################################\n## 09/2017 Justin Rajendra\n## Cluster Explorer\n## Server\n\n\n######################################################################################\n## code for server for input and output\nshinyServer(function(input,output,session) {\n\n  options(warn = -1)\n  session$onSessionEnded(function() {\n    afni_close()\n    cat('\\nAll done!\\n')\n    stopApp\n  })\n\n  ############################################\n  ## change the cluster list\n  observe({\n    if(input$mean_peak == 'Mean'){\n      updateSelectInput(session,\"clusters\",choices=clust.cm.list)\n    } else if(input$mean_peak == 'Peak'){\n      updateSelectInput(session,\"clusters\",choices=clust.pk.list)\n    }\n  })   ## end update cluster list\n\n  ############################################\n  ## change the color list\n  observe({\n    if(SI.df$test == 'Ttest'){\n      col.list <-  c('Red/Blue'='RedBlue','Dark2','Set1','Set2','Set3',\n                     'Accent','Paired','Pastel1','Pastel2')\n      updateSelectInput(session,\"col_pal\",choices=col.list)\n    }\n  })   ## end update color list\n\n  ############################################\n  ## set the slider range\n  observe({\n    if(input$mean_peak == 'Mean'){\n      val.range <- range(mean.df$value,na.rm=TRUE)\n    } else if(input$mean_peak == 'Peak'){\n      val.range <- range(peak.df$value,na.rm=TRUE)\n    }\n    range.diff <- (val.range[2]-val.range[1])*0.1\n    set.range <- c(val.range[1]-range.diff,val.range[2]+range.diff)\n    range.add <- (val.range[2]-val.range[1])*1.25\n    max.range <- c(val.range[1]-range.add,val.range[2]+range.add)\n    updateSliderInput(session,\"custom_range\",min=max.range[1],max=max.range[2],\n                      value=set.range)\n  })   ## end update cluster list\n\n  ###########################################\n  # change the coordinate location of selected cluster\n  observeEvent(input$clusters,{\n\n    ## xyz for drive afni and data and name\n    if(input$mean_peak == 'Mean' & !is.null(input$clusters)){\n      clust.x <- clust_all.df$x_cm[clust_all.df$x_y_z_cm == input$clusters]\n      clust.y <- clust_all.df$y_cm[clust_all.df$x_y_z_cm == input$clusters]\n      clust.z <- clust_all.df$z_cm[clust_all.df$x_y_z_cm == input$clusters]\n      temp.name <- input$clusters\n      clust.name <- names(clust.cm.list[clust.cm.list == temp.name])\n    } else if(input$mean_peak == 'Peak' & !is.null(input$clusters)){\n      clust.x <- clust_all.df$x_peak[clust_all.df$x_y_z_peak == input$clusters]\n      clust.y <- clust_all.df$y_peak[clust_all.df$x_y_z_peak == input$clusters]\n      clust.z <- clust_all.df$z_peak[clust_all.df$x_y_z_peak == input$clusters]\n      temp.name <- input$clusters\n      clust.name <- names(clust.pk.list[clust.pk.list == temp.name])\n    }\n    ## go to the xyz\n    afni_move(clust.x,clust.y,clust.z)\n\n  })   ## end go to cluster\n\n  ###########################################\n  clustPlot <- reactive({\n    clust.in <- clustData()\n    if(exists(\"clust.in\")){\n      stat_plot_fun(clust.in[[\"clust.df\"]],prefix,p_val,SI.df$test,\n                    clust.in[[\"clust.name\"]],input$var_sel,\n                    clust.in[[\"vox.vol\"]],input$fixed_range,\n                    input$custom_range,input$qVars_sel,input$wsVars_sel,\n                    input$OverPlot,input$col_pal,input$marker_size,\n                    input$marker_opacity,input$box_points,input$line_w,\n                    input$box_mean,input$split_bs_ws,input$qVars_center,\n                    input$box_scatter,input$jit_sel,input$error_y_sel)\n    }\n  })   ## end clust_plot\n\n  ###########################################\n  clustStat <- reactive({\n    clust.in <- clustData()\n    stat_fun(clust.in[[\"clust.df\"]],prefix,p_val,SI.df$test,SI.df$paired,\n             clust.in[[\"clust.name\"]],input$var_sel,\n             clust.in[[\"vox.vol\"]],input$qVars_sel,input$wsVars_sel,\n             input$orig_stat,input$split_bs_ws,input$box_scatter)\n  })   ## end clustStat\n\n  ###########################################\n  clustDesc <- reactive({\n    clust.in <- clustData()\n    stat_desc(clust.in[[\"clust.df\"]],prefix,p_val,SI.df$test,\n              clust.in[[\"clust.name\"]],input$var_sel,\n              clust.in[[\"vox.vol\"]],input$fixed_range,\n              input$custom_range,input$qVars_sel,\n              input$OverPlot,input$col_pal,input$marker_size)\n  })   ## end clustStat\n\n  ############################################\n  ## load the selected cluster data\n  clustData <- reactive({\n\n    ## make sure something is selected\n    if(!is.null(input$clusters)){\n\n      ## xyz for drive afni and data and name\n      if(input$mean_peak == 'Mean'){\n        clust.x <- clust_all.df$x_cm[clust_all.df$x_y_z_cm == input$clusters]\n        clust.y <- clust_all.df$y_cm[clust_all.df$x_y_z_cm == input$clusters]\n        clust.z <- clust_all.df$z_cm[clust_all.df$x_y_z_cm == input$clusters]\n        vox.vol <- clust_all.df$Voxels[clust_all.df$x_y_z_cm == input$clusters]\n        clust.df <- subset(mean.df,mean.df$coord == input$clusters)\n        temp.name <- input$clusters\n        clust.name <- names(clust.cm.list[clust.cm.list == temp.name])\n      } else if(input$mean_peak == 'Peak'){\n        clust.x <- clust_all.df$x_pk[clust_all.df$x_y_z_peak == input$clusters]\n        clust.y <- clust_all.df$y_pk[clust_all.df$x_y_z_peak == input$clusters]\n        clust.z <- clust_all.df$z_pk[clust_all.df$x_y_z_peak == input$clusters]\n        vox.vol <- clust_all.df$Voxels[clust_all.df$x_y_z_peak == input$clusters]\n        clust.df <- subset(peak.df,peak.df$coord == input$clusters)\n        temp.name <- input$clusters\n        clust.name <- names(clust.pk.list[clust.pk.list == temp.name])\n      }\n      clust.out <- list(clust.df=clust.df,x=clust.x,y=clust.y,z=clust.z,\n                        clust.name=clust.name,vox.vol=vox.vol)\n      return(clust.out)\n    }   ## end input$clusters check\n  })   ## end clustData reactive\n\n  ############################################\n  ## outputs\n\n  DT.options <- list(paging=FALSE,info=FALSE,searching=FALSE)\n  DT.options2 <- list(paging=TRUE,info=FALSE,searching=FALSE,scrollX=TRUE,\n                      pageLength=25)\n\n  output$clust_plot_orig <- renderPlotly({clustPlot()})\n  output$clust_stat_orig <- reactivePrint(function(){clustStat()})\n  output$clust_stat_desc <- renderDataTable({clustDesc()},options=DT.options)\n  output$stat_info_table <- renderTable({t(SI.df)},rownames=TRUE,colnames=FALSE)\n\n  output$data_table <- renderDataTable(options=DT.options2,{\n    clust.in <- clustData()\n    return(clust.in[[\"clust.df\"]])\n  })\n  output$summary_table <- renderPrint({\n    clust.in <- clustData()\n    clust.df <- clust.in[[\"clust.df\"]]\n    summary(clust.df)\n  })\n\n  ############################################\n  ## make or update some UI\n  output$qVars_input <- renderUI({\n    if(!is.na(qVars)){\n      selectInput('qVars_sel','Quantitative variable:',qVars)\n    } })\n  if(any(qVars %in% mvm.vars) & !is.na(mvm.vars) & !is.na(qVars)){\n    updateRadioButtons(session,'box_scatter',inline=TRUE,\n                       choices=c('Box','Interaction','Scatter'),\n                       selected='Scatter')\n  }\n  if(SI.df$test == \"Ttest\"){\n    updateRadioButtons(session,'box_scatter',inline=TRUE,\n                       choices='Box',selected='Box')\n    updateRadioButtons(session,'split_bs_ws','Factor by:',\n                       c('None'),inline=TRUE)\n    updateRadioButtons(session,'orig_stat','Which model for summary?',\n                       c('Original Model'='orig'),inline=TRUE)\n  }\n  output$wsVar_input <- renderUI({\n    if(!is.na(wsVars)){\n      selectInput('wsVars_sel','Within subject factor:',wsVars,multiple=TRUE,\n                  selected=wsVars[1])\n    } })\n\n  if(SI.df$test != \"Ttest\"){\n    if(!(\"None\" %in% catVars) & !is.na(wsVars)){\n      updateRadioButtons(session,'split_bs_ws','Factor by:',\n                         c('Between','Within','Both'),inline=TRUE)\n    } else if(!(\"None\" %in% catVars) & is.na(wsVars)){\n      updateRadioButtons(session,'split_bs_ws','Factor by:',\n                         c('Between'),inline=TRUE)\n    } else if(\"None\" %in% catVars & !is.na(wsVars)){\n      updateRadioButtons(session,'split_bs_ws','Factor by:',\n                         c('Within'),inline=TRUE)\n    }\n    if(is.na(wsVars) & \"None\" %in% catVars){\n      updateRadioButtons(session,'box_scatter',inline=TRUE,\n                         choices=c('Scatter'),selected='Scatter')\n    }\n  }\n\n})   ## end server\n",
    "created" : 1505921360475.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1137234887",
    "id" : "EF42116A",
    "lastKnownWriteTime" : 1505922453,
    "last_content_update" : 1505930618315,
    "path" : "~/research/ClusterExplorer/ClustExp_ShinyTemplate/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}