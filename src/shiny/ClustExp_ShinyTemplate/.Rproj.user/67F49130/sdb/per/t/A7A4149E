{
    "collab_server" : "",
    "contents" : "#####################################\n## 09/2017 Justin Rajendra\n## Cluster Explorer\n## UI\n\n#########################################################################\nheader <- dashboardHeader(title=paste(\"Cluster Explorer\"),titleWidth=275)\nsidebar <- dashboardSidebar(width=275,sidebarMenu(\n\n  menuItem(\"Clusters\",tabName=\"clusters\",icon=icon(\"area-chart\"),\n           selected=TRUE,startExpanded=TRUE,\n\n           ## Mean of clusters or peak\n           radioButtons('mean_peak','Plot the peak voxel or cluster mean?',\n                        c('Peak','Mean'),inline=TRUE),\n\n           ## list of clusters from the read function\n           selectInput('clusters',paste('Atlas:',atlas.name),NULL,NULL),\n\n           ## list of groups\n           selectInput('var_sel','Between subjects factor:',choices=catVars,\n                       selected=catVars[1],multiple=TRUE),\n\n           ## wsVars and qVars\n           # uiOutput('bsVar_input'),\n           uiOutput('wsVar_input'),\n           uiOutput('qVars_input'),\n\n           ## show original stat output?\n           radioButtons('orig_stat','Which model for summary?',\n                        c('Original Model'='orig','Plotted Model'='plot'),\n                        inline=TRUE),\n\n           ## plot options\n           radioButtons('split_bs_ws','Factor by:',c(NA),inline=TRUE),\n           radioButtons('box_scatter','Plot type:',c('Box','Interaction'),\n                        inline=TRUE),\n\n           ## scatter only\n           conditionalPanel('input.box_scatter == \"Scatter\"',\n                            checkboxInput('OverPlot',\n                                          'Plot separately for each level?'),\n                            checkboxInput('qVars_center','Plot centered?')\n           ),br()\n\n\n  ),   ## end clusters tab\n  menuItem(\"Plot Settings\",tabName=\"settings\",icon=icon(\"gears\"),\n           selected=FALSE,startExpanded=FALSE,\n\n           ## min and max\n           checkboxInput('fixed_range','Lock data range?'),\n           conditionalPanel('input.fixed_range',\n                            sliderInput('custom_range','Min:Max',sep='',\n                                        step=0.001,value=c(-1,1),\n                                        min=NULL,max=NULL) ),\n\n           ## only show for box\n           conditionalPanel('input.box_scatter == \"Box\"',\n                            radioButtons('box_points','Add subject data points?',\n                                         c('all','outliers only'='outliers'),\n                                         inline=TRUE),\n                            radioButtons('box_mean','Add mean or sd?',\n                                         inline=TRUE,\n                                         c('no'='FALSE','mean'='TRUE',\n                                           'mean and sd'='sd'))\n           ),\n           ## only show for scatters:\n           conditionalPanel('input.box_scatter != \"Box\"',\n                            numericInput('marker_size','Marker size:',value=10,\n                                         min=2,step=1),\n                            sliderInput('marker_opacity','Marker opacity:',0.8,\n                                         min=0.05,max=1,step=0.05),\n                            numericInput('line_w','Line width:',value=2,\n                                         min=0.5,step=0.5)\n           ),\n           conditionalPanel('input.box_scatter == \"Interaction\"',\n                            sliderInput('jit_sel','Jitter:',min=0,max=1,\n                                        value=0.3,step=0.1),\n                            radioButtons('error_y_sel','Show error bars:',\n                                          choices=c('no','SD','SE'),\n                                          inline=TRUE)\n           ),\n           ## show color pallet, if ttest add red/blue via update\n           selectInput('col_pal','Color pallete:',\n                       choices=c('Dark2','Set1','Set2','Set3','Accent','Paired',\n                                 'Pastel1','Pastel2')),\n           br()\n  )\n)   ## end side bar menu\n)   ## end sidbar\n\n#########################################################################\nbody <-  dashboardBody(\n  tabsetPanel(\n    tabPanel('Main',icon=icon(\"beer\"),br(),\n             fluidRow(\n               column(width=12,plotlyOutput('clust_plot_orig',height=\"100%\"))\n             ),br(),\n             fluidRow(\n               h4('Model Summary',align='center'),\n               column(width=12,verbatimTextOutput('clust_stat_orig'))\n             ),br(),\n             fluidRow(\n               h4(\"Descriptive Statistics for Cluster\",align='center'),\n               column(width=12,dataTableOutput('clust_stat_desc'))\n             )\n    ),   ## end main panel\n    #################################\n    tabPanel('Data Table',icon=icon(\"table\"),br(),\n             fluidRow(column(width=12,br(),\n                             dataTableOutput('data_table'),br()) )\n    ),   ## end full data table panel\n    #################################\n    tabPanel('Data Summary',icon=icon(\"calculator\"),br(),\n             fluidRow(column(width=12,br(),\n                             verbatimTextOutput('summary_table'),br()) )\n    ),   ## end data table summary panel\n    #################################\n    tabPanel('Inputs',icon=icon(\"inbox\"),br(),\n             fluidRow(column(width=12,br(),\n                             tableOutput('stat_info_table'),br()) )\n    )   ## end data table summary panel\n  )   ## end tabset panel\n)   ## end dashboard body\n\n## run it\ndashboardPage(header, sidebar, body)\n",
    "created" : 1505921359452.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "705651327",
    "id" : "A7A4149E",
    "lastKnownWriteTime" : 1505922453,
    "last_content_update" : 1505922453056,
    "path" : "~/research/ClusterExplorer/ClustExp_ShinyTemplate/ui.R",
    "project_path" : "ui.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}